/*! Generated by Bundle-Script */


/*! vj/proto.js */
String.prototype.padLeft = function(len, repeatChar)
{
    repeatChar |= '0';

    var ret = '';
    var loopTimes = len - this.length;

    for(var i = 0; i < loopTimes; ++i)
    ret += repeatChar;

    return ret + this.toString();
};

String.prototype.padRight = function(len, repeatChar)
{
    repeatChar |= '0';

    var ret = '';
    var loopTimes = len - this.length;

    for(var i = 0; i < loopTimes; ++i)
    ret += repeatChar;

    return this + ret.toString();
};

String.prototype.format = function(obj)
{
    // http://www.planabc.net/2011/05/31/simple_javascript_template_substitute

    if(!(Object.prototype.toString.call(obj) === '[object Object]' && 'isPrototypeOf' in obj))
        return this;

    return this.replace(/\{([^{}]+)\}/g, function(match, key)
    {
        var value = obj[key];
        return (value !== undefined) ? value : match;
    });
};

String.prototype.parseURI = function(strict)
{
    // http://blog.stevenlevithan.com/archives/parseuri

    strict = strict || true;

    var o =
    {
        strictMode : strict,
        key : ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
        q :
        {
            name : "queryKey",
            parser : /(?:^|&)([^&=]*)=?([^&]*)/g
        },
        parser :
        {
            strict : /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
            loose : /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
        }
    };

    var m = o.parser[o.strictMode ? "strict" : "loose"].exec(this.toString()), uri = {}, i = 14;

    while(i--)
    uri[o.key[i]] = m[i] || "";

    uri[o.q.name] = {};
    uri[o.key[12]].replace(o.q.parser, function($0, $1, $2)
    {
        if($1)
            uri[o.q.name][$1] = $2;
    });
    return uri;
}

String.prototype.parseQuery = function()
{
    var ret = {};

    var uriSection = this.toString().split('?');
    ret.link = this.toString();
    ret.page = uriSection[0];
    ret.queryString = uriSection[1];
    ret.query = {};

    if(uriSection[1] != undefined)
    {
        uriSection[1].replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2)
        {
            if($1)
                ret.query[$1] = $2;
        });
    }

    return ret;
}

Date.prototype.format = function(formatStr)
{
    //http://www.codingforums.com/archive/index.php/t-11088.html
    
    var heap = formatStr.split('');
    var resHeap = new Array(heap.length);
    var escapeChar = '\\';
    
    // go through array and extract identifiers from its fields
    for (var i = 0; i < heap.length; i++)
    {
        switch(heap[i]) 
        {
            case escapeChar:
                resHeap[i] = heap[i+1];
                i++;
                break;

            case "a": // "am" or "pm"
                var temp = this.getHours();
                resHeap[i] = (temp < 12) ? "am" : "pm";
                break;

            case "A": // "AM" or "PM"
                var temp = this.getHours();
                resHeap[i] = (temp < 12) ? "AM" : "PM";
                break;

            case "d": // day of the month, 2 digits with leading zeros; i.e. "01" to "31"
                var temp = String(this.getDate());
                resHeap[i] = (temp.length > 1) ? temp : "0" + temp;
                break;

            case "g": // hour, 12-hour format without leading zeros; i.e. "1" to "12"
                var temp = this.getHours();
                resHeap[i] = (temp <= 12) ? temp : (temp - 12);
                break;

            case "G": // hour, 24-hour format without leading zeros; i.e. "0" to "23"
                resHeap[i] = String(this.getHours());
                break;

            case "h": // hour, 12-hour format; i.e. "01" to "12"
                var temp = String(this.getHours());
                temp = (temp <= 12) ? temp : (temp - 12);
                resHeap[i] = (temp.length > 1) ? temp : "0" + temp;
                break;

            case "H": // hour, 24-hour format; i.e. "00" to "23"
                var temp = String(this.getHours());
                resHeap[i] = (temp.length > 1) ? temp : "0" + temp;
                break;

            case "i": // minutes; i.e. "00" to "59" 
                var temp = String(this.getMinutes());
                resHeap[i] = (temp.length > 1) ? temp : "0" + temp;
                break;

            case "m": // month; i.e. "01" to "12"
                var temp = String(this.getMonth() + 1);
                resHeap[i] = (temp.length > 1) ? temp : "0" + temp;
                break;

            case "n": // month without leading zeros; i.e. "1" to "12"
                resHeap[i] = this.getMonth() + 1;
                break;

            case "s": // seconds; i.e. "00" to "59"
                var temp = String(this.getSeconds()); 
                resHeap[i] = (temp.length > 1) ? temp : "0" + temp;
                break;

            case "U": // seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
                // remember that this does not return milisecs! 
                resHeap[i] = Math.floor(this.getTime() / 1000); 
                break;

            case "y": // year, 2 digits; i.e. "99"
                resHeap[i] = String(this.getFullYear()).substring(2);
                break;

            case "Y": // year, 4 digits; i.e. "1999"
                resHeap[i] = this.getFullYear();
                break;

            default:
                resHeap[i] = heap[i];
        }
    }

    return resHeap.join('');
}


/*! lib/ecma5/ecma5.js */
// Add ECMA262-5 method binding if not supported natively
//
if (!('bind' in Function.prototype)) {
    Function.prototype.bind= function(owner) {
        var that= this;
        if (arguments.length<=1) {
            return function() {
                return that.apply(owner, arguments);
            };
        } else {
            var args= Array.prototype.slice.call(arguments, 1);
            return function() {
                return that.apply(owner, arguments.length===0? args : args.concat(Array.prototype.slice.call(arguments)));
            };
        }
    };
}

// Add ECMA262-5 string trim if not supported natively
//
if (!('trim' in String.prototype)) {
    String.prototype.trim= function() {
        return this.replace(/^\s+/, '').replace(/\s+$/, '');
    };
}

// Add ECMA262-5 Array methods if not supported natively
//
if (!('indexOf' in Array.prototype)) {
    Array.prototype.indexOf= function(find, i /*opt*/) {
        if (i===undefined) i= 0;
        if (i<0) i+= this.length;
        if (i<0) i= 0;
        for (var n= this.length; i<n; i++)
            if (i in this && this[i]===find)
                return i;
        return -1;
    };
}
if (!('lastIndexOf' in Array.prototype)) {
    Array.prototype.lastIndexOf= function(find, i /*opt*/) {
        if (i===undefined) i= this.length-1;
        if (i<0) i+= this.length;
        if (i>this.length-1) i= this.length-1;
        for (i++; i-->0;) /* i++ because from-argument is sadly inclusive */
            if (i in this && this[i]===find)
                return i;
        return -1;
    };
}
if (!('forEach' in Array.prototype)) {
    Array.prototype.forEach= function(action, that /*opt*/) {
        for (var i= 0, n= this.length; i<n; i++)
            if (i in this)
                action.call(that, this[i], i, this);
    };
}
if (!('map' in Array.prototype)) {
    Array.prototype.map= function(mapper, that /*opt*/) {
        var other= new Array(this.length);
        for (var i= 0, n= this.length; i<n; i++)
            if (i in this)
                other[i]= mapper.call(that, this[i], i, this);
        return other;
    };
}
if (!('filter' in Array.prototype)) {
    Array.prototype.filter= function(filter, that /*opt*/) {
        var other= [], v;
        for (var i=0, n= this.length; i<n; i++)
            if (i in this && filter.call(that, v= this[i], i, this))
                other.push(v);
        return other;
    };
}
if (!('every' in Array.prototype)) {
    Array.prototype.every= function(tester, that /*opt*/) {
        for (var i= 0, n= this.length; i<n; i++)
            if (i in this && !tester.call(that, this[i], i, this))
                return false;
        return true;
    };
}
if (!('some' in Array.prototype)) {
    Array.prototype.some= function(tester, that /*opt*/) {
        for (var i= 0, n= this.length; i<n; i++)
            if (i in this && tester.call(that, this[i], i, this))
                return true;
        return false;
    };
}


/*! lib/mass-Framework/mass.js */
//Modified from Mass-Framework

(function(global, DOC){
    
    var $ = window.mass = function(){};

    var NsVal = $;
    NsVal.uuid = 1;

    var W3C = DOC.dispatchEvent; //IE9开始支持W3C的事件模型与getComputedStyle取样式值
    var html = DOC.documentElement; //HTML元素
    var head = DOC.head || DOC.getElementsByTagName("head")[0]; //HEAD元素
    var factorys = []; //储存需要绑定ID与factory对应关系的模块（标准浏览器下，先parse的script节点会先onload）
    var mass = 1; //当前框架的版本号
    var all = "mass,lang,class,flow,data,support,query,node,attr,css,event,ajax,fx";
    var moduleClass = "mass" + (new Date - 0);
    var hasOwn = Object.prototype.hasOwnProperty;
    var class2type = {
        "[object HTMLDocument]": "Document",
        "[object HTMLCollection]": "NodeList",
        "[object StaticNodeList]": "NodeList",
        "[object DOMWindow]": "Window",
        "[object global]": "Window",
        "null": "Null",
        "NaN": "NaN",
        "undefined": "Undefined"
    };
    var serialize = class2type.toString;
    
    /**
     * 糅杂，为一个对象添加更多成员
     * @param {Object} receiver 接受者
     * @param {Object} supplier 提供者
     * @return  {Object} 目标对象
     * @api public
     */
    function mix(receiver, supplier) {
        var args = [].slice.call(arguments),
                i = 1,
                key, //如果最后参数是布尔，判定是否覆写同名属性
                ride = typeof args[args.length - 1] === "boolean" ? args.pop() : true;
        if (args.length === 1) { //处理$.mix(hash)的情形
            receiver = !this.window ? this : {};
            i = 0;
        }
        while ((supplier = args[i++])) {
            for (key in supplier) { //允许对象糅杂，用户保证都是对象
                if (hasOwn.call(supplier, key) && (ride || !(key in receiver))) {
                    receiver[key] = supplier[key];
                }
            }
        }
        return receiver;
    }

    //为此版本的命名空间对象添加成员
    mix($, {
        html: html,
        head: head,
        mix: mix,
        rword: /[^, ]+/g,
        rmapper: /(\w+)_(\w+)/g,
        mass: mass,
        hasOwn: function(obj, key) {
            return hasOwn.call(obj, key);
        },
        //大家都爱用类库的名字储存版本号，我也跟风了
        "@bind": W3C ? "addEventListener" : "attachEvent",
        /**
         * 数组化
         * @param {ArrayLike} nodes 要处理的类数组对象
         * @param {Number} start 可选。要抽取的片断的起始下标。如果是负数，从后面取起
         * @param {Number} end  可选。规定从何处结束选取
         * @return {Array}
         * @api public
         */
        slice: W3C ? function(nodes, start, end) {
            return factorys.slice.call(nodes, start, end);
        } : function(nodes, start, end) {
            var ret = [],
                    n = nodes.length;
            if (end === void 0 || typeof end === "number" && isFinite(end)) {
                start = parseInt(start, 10) || 0;
                end = end == void 0 ? n : parseInt(end, 10);
                if (start < 0) {
                    start += n;
                }
                if (end > n) {
                    end = n;
                }
                if (end < 0) {
                    end += n;
                }
                for (var i = start; i < end; ++i) {
                    ret[i - start] = nodes[i];
                }
            }
            return ret;
        },
        /**
         * 用于建立一个从元素到数据的关联，应用于事件绑定，元素去重
         * @param {Any} obj
         * @return {Number} 一个UUID
         */
        getUid: W3C ? function(obj) { //IE9+,标准浏览器
            return obj.uniqueNumber || (obj.uniqueNumber = NsVal.uuid++);
        } : function(obj) {
            if (obj.nodeType !== 1) { //如果是普通对象，文档对象，window对象
                return obj.uniqueNumber || (obj.uniqueNumber = NsVal.uuid++);
            } //注：旧式IE的XML元素不能通过el.xxx = yyy 设置自定义属性
            var uid = obj.getAttribute("uniqueNumber");
            if (!uid) {
                uid = NsVal.uuid++;
                obj.setAttribute("uniqueNumber", uid);
            }
            return +uid; //确保返回数字
        },
        /**
         * 绑定事件(简化版)
         * @param {Node|Document|window} el 触发者
         * @param {String} type 事件类型
         * @param {Function} fn 回调
         * @param {Boolean} phase ? 是否捕获，默认false
         * @return {Function} fn 刚才绑定的回调
         */
        bind: W3C ? function(el, type, fn, phase) {
            el.addEventListener(type, fn, !!phase);
            return fn;
        } : function(el, type, fn) {
            el.attachEvent && el.attachEvent("on" + type, fn);
            return fn;
        },
        /**
         * 卸载事件(简化版)
         * @param {Node|Document|window} el 触发者
         * @param {String} type 事件类型
         * @param {Function} fn 回调
         * @param {Boolean} phase ? 是否捕获，默认false
         */
        unbind: W3C ? function(el, type, fn, phase) {
            el.removeEventListener(type, fn || $.noop, !!phase);
        } : function(el, type, fn) {
            if (el.detachEvent) {
                el.detachEvent("on" + type, fn || $.noop);
            }
        },
        /**
         * 用于取得数据的类型（一个参数的情况下）或判定数据的类型（两个参数的情况下）
         * @param {Any} obj 要检测的东西
         * @param {String} str ? 要比较的类型
         * @return {String|Boolean}
         * @api public
         */
        type: function(obj, str) {
            var result = class2type[(obj == null || obj !== obj) ? obj : serialize.call(obj)] || obj.nodeName || "#";
            if (result.charAt(0) === "#") { //兼容旧式浏览器与处理个别情况,如window.opera
                //利用IE678 window == document为true,document == window竟然为false的神奇特性
                if (obj == obj.document && obj.document != obj) {
                    result = "Window"; //返回构造器名字
                } else if (obj.nodeType === 9) {
                    result = "Document"; //返回构造器名字
                } else if (obj.callee) {
                    result = "Arguments"; //返回构造器名字
                } else if (isFinite(obj.length) && obj.item) {
                    result = "NodeList"; //处理节点集合
                } else {
                    result = serialize.call(obj).slice(8, -1);
                }
            }
            if (str) {
                return str === result;
            }
            return result;
        },
        /**
         *  将调试信息打印到控制台或页面
         *  $.log(str, page, level )
         *  @param {Any} str 用于打印的信息，不是字符串将转换为字符串
         *  @param {Boolean} page ? 是否打印到页面
         *  @param {Number} level ? 通过它来过滤显示到控制台的日志数量。
         *          0为最少，只显示最致命的错误；7，则连普通的调试消息也打印出来。
         *          显示算法为 level <= $.config.level。
         *          这个$.config.level默认为9。下面是level各代表的含义。
         *          0 EMERGENCY 致命错误,框架崩溃
         *          1 ALERT 需要立即采取措施进行修复
         *          2 CRITICAL 危急错误
         *          3 ERROR 异常
         *          4 WARNING 警告
         *          5 NOTICE 通知用户已经进行到方法
         *          6 INFO 更一般化的通知
         *          7 DEBUG 调试消息
         *  @return {String}
         *  @api public
         */
        log: function(str, page, level) {
            for (var i = 1, show = true; i < arguments.length; i++) {
                level = arguments[i];
                if (typeof level === "number") {
                    show = level <= $.config.level;
                } else if (level === true) {
                    page = true;
                }
            }
            if (show) {
                if (page === true) {
                    $.require("ready", function() {
                        var div = DOC.createElement("pre");
                        div.className = "mass_sys_log";
                        div.innerHTML = str + ""; //确保为字符串
                        DOC.body.appendChild(div);
                    });
                } else if (window.opera) {
                    opera.postError(str)
                    //http://www.cnblogs.com/zoho/archive/2013/01/31/2886651.html
                    //http://www.dotblogs.com.tw/littlebtc/archive/2009/04/06/ie8-ajax-2-debug.aspx
                } else if (global.console && console.info && console.log) {
                    console.log(str);
                }

            }
            return str;
        },
        /**
         * 生成键值统一的对象，用于高速化判定
         * @param {Array|String} array 如果是字符串，请用","或空格分开
         * @param {Number} val ? 默认为1
         * @return {Object}
         */
        oneObject: function(array, val) {
            if (typeof array === "string") {
                array = array.match($.rword) || [];
            }
            var result = {},
                    value = val !== void 0 ? val : 1;
            for (var i = 0, n = array.length; i < n; i++) {
                result[array[i]] = value;
            }
            return result;
        },
        //一个空函数
        noop: function() {
        },
        /**
         * 抛出错误,方便调试
         * @param {String} str
         * @param {Error}  e ? 具体的错误对象构造器
         * EvalError: 错误发生在eval()中
         * SyntaxError: 语法错误,错误发生在eval()中,因为其它点发生SyntaxError会无法通过解释器
         * RangeError: 数值超出范围
         * ReferenceError: 引用不可用
         * TypeError: 变量类型不是预期的
         * URIError: 错误发生在encodeURI()或decodeURI()中
         */
        error: function(str, e) {
            throw new (e || Error)(str);
        }
    });

    "Boolean,Number,String,Function,Array,Date,RegExp,Window,Document,Arguments,NodeList".replace($.rword, function(name) {
        class2type["[object " + name + "]"] = name;
    });

})(self, self.document); //为了方便在VS系列实现智能提示,把这里的this改成self或window
/**
 changelog:
 2011.7.11
 @开头的为私有的系统变量，防止人们直接调用,
 dom.check改为dom["@emitter"]
 dom.namespace改为dom["mass"]
 去掉无用的dom.modules
 优化exports方法
 2011.8.4
 强化dom.log，让IE6也能打印日志
 重构fixOperaError与resolveCallbacks
 将provide方法合并到require中去
 2011.8.7
 重构define,require,resolve
 添加"@modules"属性到dom命名空间上
 增强domReady传参的判定
 2011.8.18 应对HTML5 History API带来的“改变URL不刷新页面”技术，让URL改变时让namespace也跟着改变！
 2011.8.20 去掉dom.K,添加更简单dom.noop，用一个简单的异步列队重写dom.ready与错误堆栈dom.stack
 2011.9.5  强化dom.type
 2011.9.19 强化dom.mix
 2011.9.24 简化dom.bind 添加dom.unbind
 2011.9.28 dom.bind 添加返回值
 2011.9.30 更改是否在顶层窗口的判定  global.frameElement == null --> self.eval === top.eval
 2011.10.1
 更改dom.uuid为dom["@uuid"],dom.basePath为dom["@path"]，以示它们是系统变量
 修复dom.require BUG 如果所有依赖模块之前都加载执行过，则直接执行回调函数
 移除dom.ready 只提供dom(function(){})这种简捷形式
 2011.10.4 强化对IE window的判定, 修复dom.require BUG dn === cn --> dn === cn && !callback._name
 2011.10.9
 简化fixOperaError中伪dom命名空间对象
 优化截取隐藏命名空间的正则， /(\W|(#.+))/g --〉  /(#.+|\\W)/g
 2011.10.13 dom["@emitter"] -> dom["@target"]
 2011.10.16 移除XMLHttpRequest的判定，回调函数将根据依赖列表生成参数，实现更彻底的模块机制
 2011.10.20 添加error方法，重构log方法
 2011.11.6  重构uuid的相关设施
 2011.11.11 多版本共存
 2011.12.19 增加define方法
 2011.12.22 加载用iframe内增加$变量,用作过渡.
 2012.1.15  更换$为命名空间
 2012.1.29  升级到v15
 2012.1.30 修正_checkFail中的BUG，更名_resolveCallbacks为_checkDeps
 2012.2.3 $.define的第二个参数可以为boolean, 允许文件合并后，在标准浏览器跳过补丁模块
 2012.2.23 修复内部对象泄漏，导致与外部$变量冲突的BUG
 2012.4.5 升级UUID系统，以便页面出现多个版本共存时，让它们共享一个计数器。
 2012.4.25  升级到v16
 简化_checkFail方法，如果出现死链接，直接打印模块名便是，不用再放入错误栈中了。
 简化deferred列队，统一先进先出。
 改进$.mix方法，允许只存在一个参数，直接将属性添加到$命名空间上。
 内部方法assemble更名为setup，并强化调试机制，每加入一个新模块， 都会遍历命名空间与原型上的方法，重写它们，添加try catch逻辑。
 2012.5.6更新rdebug,不处理大写开头的自定义"类"
 2012.6.5 对IE的事件API做更严格的判定,更改"@target"为"@bind"
 2012.6.10 精简require方法 处理opera11.64的情况
 2012.6.13 添加异步列队到命名空间,精简domReady
 2012.6.14 精简innerDefine,更改一些术语
 2012.6.25 domReady后移除绑定事件
 2012.7.23 动态指定mass Framewoke的命名空间与是否调试
 2012.8.26 升级到v17
 2012.8.27 将$.log.level改到$.config.level中去
 2012.8.28 将最后一行的this改成self
 2012.9.12 升级到v18 添加本地储存的支持
 2012.11.21 升级到v19 去掉CMD支持与$.debug的实现,增加循环依赖的判定
 2012.12.5 升级到v20，参考requireJS的实现，去掉iframe检测，暴露define与require
 2012.12.16 精简loadCSS 让getCurrentScript更加安全
 2012.12.18 升级v21 处理opera readyState BUG 与IE6下的节点插入顺序
 2012.12.26 升级v22 移除本地储存，以后用插件形式实现，新增一个HTML5 m标签的支持
 2013.1.22 处理动态插入script节点的BUG, 对让getCurrentScript进行加强
 2013.4.1 升级支v23 支持动态添加加载器，正确取得加载器所在的节点的路径
 2013.4.3 升级支v24 支持不按AMD规范编写的JS文件加载
 
 http://stackoverflow.com/questions/326596/how-do-i-wrap-a-function-in-javascript
 https://github.com/eriwen/javascript-stacktrace
 不知道什么时候开始，"不要重新发明轮子"这个谚语被传成了"不要重新造轮子"，于是一些人，连造轮子都不肯了。
 重新发明东西并不会给我带来论文发表，但是它却给我带来了更重要的东西，这就是独立的思考能力。
 一旦一个东西被你“想”出来，而不是从别人那里 “学”过来，那么你就知道这个想法是如何产生的。
 这比起直接学会这个想法要有用很多，因为你知道这里面所有的细节和犯过的错误。而最重要的，
 其实是由此得 到的直觉。如果直接去看别人的书或者论文，你就很难得到这种直觉，因为一般人写论文都会把直觉埋藏在一堆符号公式之下，
 让你看不到背后的真实想法。如果得到了直觉，下一次遇到类似的问题，你就有可能很快的利用已有的直觉来解决新的问题。
 Javascript 文件的同步加载与异步加载 http://www.cnblogs.com/ecalf/archive/2012/12/12/2813962.html
 http://sourceforge.net/apps/trac/pies/wiki/TypeSystem/zh
 http://tableclothjs.com/ 一个很好看的表格插件
 http://layouts.ironmyers.com/
 http://warpech.github.com/jquery-handsontable/
 http://baidu.365rili.com/wnl.html?bd_user=1392943581&bd_sig=23820f7a2e2f2625c8945633c15089dd&canvas_pos=search&keyword=%E5%86%9C%E5%8E%86
 http://unscriptable.com/2011/10/02/closures-for-dummies-or-why-iife-closure/
 http://unscriptable.com/2011/09/30/amd-versus-cjs-whats-the-best-format/
 http://news.cnblogs.com/n/157042/
 http://www.cnblogs.com/beiyuu/archive/2011/07/18/iframe-tech-performance.html iframe异步加载技术及性能
 http://www.cnblogs.com/lhb25/archive/2012/09/11/resources-that-complement-twitter-bootstrap.html
 http://www.cnblogs.com/rainman/archive/2011/06/22/2086069.html
 http://www.infoq.com/cn/articles/how-to-create-great-js-module 优秀的JavaScript模块是怎样炼成的
 http://y.duowan.com/resources/js/jsFrame/demo/index.html
 https://github.com/etaoux/brix
 */


/*! lib/mass-Framework/Icarus.js */
//=========================================
// 选择器模块 v5 开发代号Icarus
//==========================================
(function($, window) {
    var global = window,
        DOC = global.document;
    $.mix({
        isXML: function(el) {
            //http://www.cnblogs.com/rubylouvre/archive/2010/03/14/1685360.
            var doc = el.ownerDocument || el
            return doc.createElement("p").nodeName === "p";
        },
        contains: function(a, b, itself) {
            // 第一个节点是否包含第二个节点
            //contains 方法支持情况：chrome+ firefox9+ ie5+, opera9.64+(估计从9.0+),safari5.1.7+
            if (a === b) {
                return !!itself;
            }
            if(!b.parentNode)
                return false;
            if (a.contains) {
                return a.contains(b);
            } else if (a.compareDocumentPosition) {
                return !!(a.compareDocumentPosition(b) & 16);
            }
            while ((b = b.parentNode))
            if (a === b) return true;
            return false;
        },
        getText: function() {
            //获取某个节点的文本，如果此节点为元素节点，则取其childNodes的所有文本
            return function getText(nodes) {
                nodes = nodes.nodeType ? [nodes] : nodes;
                for (var i = 0, ret = "", node; node = nodes[i++];) {
                    // 对得文本节点与CDATA的内容
                    if (node.nodeType === 3 || node.nodeType === 4) {
                        ret += node.nodeValue;
                        //取得元素节点的内容
                    } else if (node.nodeType !== 8) {
                        ret += getText(node.childNodes);
                    }
                }
                return ret;
            }
        }(),
        unique: function(nodes) {
            if (nodes.length < 2) {
                return nodes;
            }
            var result = [],
                array = [],
                uniqResult = {},
                node = nodes[0],
                index, ri = 0,
                sourceIndex = typeof node.sourceIndex === "number",
                compare = typeof node.compareDocumentPosition == "function";
            //如果支持sourceIndex我们将使用更为高效的节点排序
            //http://www.cnblogs.com/jkisjk/archive/2011/01/28/array_quickly_sortby.html

            if (!sourceIndex && !compare) { //用于旧式IE的XML
                var all = (node.ownerDocument || node).getElementsByTagName("*");
                for (var index = 0; node = all[index]; index++) {
                    node.setAttribute("sourceIndex", index);
                }
                sourceIndex = true;
            }
            if (sourceIndex) { //IE opera
                for (var i = 0, n = nodes.length; i < n; i++) {
                    node = nodes[i];
                    index = (node.sourceIndex || node.getAttribute("sourceIndex")) + 1e8;
                    if (!uniqResult[index]) {
                        (array[ri++] = new String(index))._ = node;
                        uniqResult[index] = 1;
                    }
                }
                array.sort();
                while (ri)
                result[--ri] = array[ri]._;
                return result;
            } else {
                nodes.sort(sortOrder);
                if (sortOrder.hasDuplicate) {
                    for (i = 1; i < nodes.length; i++) {
                        if (nodes[i] === nodes[i - 1]) {
                            nodes.splice(i--, 1);
                        }
                    }
                }
                sortOrder.hasDuplicate = false; //还原
                return nodes;
            }
        }
    });

    function sortOrder(a, b) {
        if (a === b) {
            sortOrder.hasDuplicate = true;
            return 0;
        } //现在标准浏览器的HTML与XML好像都支持compareDocumentPosition
        if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
            return a.compareDocumentPosition ? -1 : 1;
        }
        return a.compareDocumentPosition(b) & 4 ? -1 : 1;
    }
    var reg_combinator = /^\s*([>+~,\s])\s*(\*|(?:[-\w*]|[^\x00-\xa0]|\\.)*)/,
        trimLeft = /^\s+/,
        trimRight = /\s+$/,
        reg_quick = /^(^|[#.])((?:[-\w]|[^\x00-\xa0]|\\.)+)$/,
        reg_comma = /^\s*,\s*/,
        reg_sequence = /^([#\.:]|\[\s*)((?:[-\w]|[^\x00-\xa0]|\\.)+)/,
        reg_pseudo = /^\(\s*("([^"]*)"|'([^']*)'|[^\(\)]*(\([^\(\)]*\))?)\s*\)/,
        reg_attrib = /^\s*(?:(\S?=)\s*(?:(['"])(.*?)\2|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
        reg_attrval = /\\([0-9a-fA-F]{2,2})/g,
        reg_sensitive = /^(title|id|name|class|for|href|src)$/,
        reg_backslash = /\\/g,
        reg_tag = /^((?:[-\w\*]|[^\x00-\xa0]|\\.)+)/, //能使用getElementsByTagName处理的CSS表达式
        hash_operator = {
            "=": 1,
            "!=": 2,
            "|=": 3,
            "~=": 4,
            "^=": 5,
            "$=": 6,
            "*=": 7
        };

    if (trimLeft.test("\xA0")) {
        trimLeft = /^[\s\xA0]+/;
        trimRight = /[\s\xA0]+$/;
    }



    var slice = Array.prototype.slice,
        makeArray = function(nodes, result, flag_multi) {
            nodes = slice.call(nodes, 0);
            if (result) {
                result.push.apply(result, nodes);
            } else {
                result = nodes;
            }
            return flag_multi ? $.unique(result) : result;
        };
    //IE56789无法使用数组方法转换节点集合
    try {
        slice.call($.html.childNodes, 0)[0].nodeType;
    } catch (e) {
        makeArray = function(nodes, result, flag_multi) {
            var ret = result || [],
                ri = ret.length;
            for (var i = 0, el; el = nodes[i++];) {
                ret[ri++] = el
            }
            return flag_multi ? $.unique(ret) : ret;
        }
    }

    function _toHex(x, y) {
        return String.fromCharCode(parseInt(y, 16));
    }

    function parse_nth(expr) {
        var orig = expr
        expr = expr.replace(/^\+|\s*/g, ''); //清除无用的空白
        var match = (expr === "even" && "2n" || expr === "odd" && "2n+1" || !/\D/.test(expr) && "0n+" + expr || expr).match(/(-?)(\d*)n([-+]?\d*)/);
        return parse_nth[orig] = {
            a: (match[1] + (match[2] || 1)) - 0,
            b: match[3] - 0
        };
    }

    function getElementsByTagName(tagName, els, flag_xml) {
        var method = "getElementsByTagName",
            elems = [],
            uniqResult = {},
            prefix
        if (flag_xml && tagName.indexOf(":") > 0 && els.length && els[0].lookupNamespaceURI) {
            var arr = tagName.split(":");
            prefix = arr[0];
            tagName = arr[1];
            method = "getElementsByTagNameNS";
            prefix = els[0].lookupNamespaceURI(prefix);
        }
        switch (els.length) {
            case 0:
                return elems;
            case 1:
                //在IE67下，如果存在一个name为length的input元素，下面的all.length返回此元素，而不是长度值
                var all = prefix ? els[0][method](prefix, tagName) : els[0][method](tagName);
                for (var i = 0, ri = 0, el; el = all[i++];) {
                    if (el.nodeType === 1) { //防止混入注释节点
                        elems[ri++] = el
                    }
                }
                return elems;
            default:
                for (i = 0, ri = 0; el = els[i++];) {
                    var nodes = prefix ? el[method](prefix, tagName) : el[method](tagName)
                    for (var j = 0, node; node = nodes[j++];) {
                        var uid = $.getUid(node);

                        if (!uniqResult[uid]) {
                            uniqResult[uid] = elems[ri++] = node;
                        }
                    }
                }
                return elems;
        }
    }
    //IE9 以下的XML文档不能直接设置自定义属性
    var attrURL = $.oneObject('action,cite,codebase,data,href,longdesc,lowsrc,src,usemap', 2);
    var bools = "autofocus,autoplay,async,checked,controls,declare,disabled,defer,defaultChecked," + "contentEditable,ismap,loop,multiple,noshade,open,noresize,readOnly,selected"
    var boolOne = $.oneObject(bools.toLowerCase());

    //检测各种BUG（fixGetAttribute，fixHasAttribute，fixById，fixByTag）
    var fixGetAttribute, fixHasAttribute, fixById, fixByTag;
    var getHTMLText = new Function("els", "return els[0]." + ($.html.textContent ? "textContent" : "innerText"));

    new function() {
        var select = DOC.createElement("select");
        var option = select.appendChild(DOC.createElement("option"));
        option.setAttribute("selected", "selected");
        option.className = "x";
        fixGetAttribute = option.getAttribute("class") !== "x";
        select.appendChild(DOC.createComment(""));
        fixByTag = select.getElementsByTagName("*").length === 2;
        var all = DOC.getElementsByTagName("*"),
            node, nodeType, comments = [],
            i = 0,
            j = 0;
        while ((node = all[i++])) {
            nodeType = node.nodeType;
            nodeType === 1 ? $.getUid(node) : nodeType === 8 ? comments.push(node) : 0;
        }
        while ((node = comments[j++])) {
            node.parentNode.removeChild(node);
        }
        fixHasAttribute = select.hasAttribute ? !option.hasAttribute('selected') : true;

        var form = DOC.createElement("div"),
            id = "fixId" + (new Date()).getTime(),
            root = $.html;
        form.innerHTML = "<a name='" + id + "'/>";
        root.insertBefore(form, root.firstChild);
        fixById = !! DOC.getElementById(id);
        root.removeChild(form)
    };

    //http://www.atmarkit.co.jp/fxml/tanpatsu/24bohem/01.html
    //http://msdn.microsoft.com/zh-CN/library/ms256086.aspx
    //https://developer.mozilla.org/cn/DOM/document.evaluate
    //http://d.hatena.ne.jp/javascripter/20080425/1209094795

    function getElementsByXPath(xpath, context, doc) {
        var result = [];
        try {
            if (global.DOMParser) { //IE9支持DOMParser，但我们不能使用doc.evaluate!global.DOMParser
                var nodes = doc.evaluate(xpath, context, null, 7, null);
                for (var i = 0, n = nodes.snapshotLength; i < n; i++) {
                    result[i] = nodes.snapshotItem(i)
                }
            } else {
                nodes = context.selectNodes(xpath);
                for (i = 0, n = nodes.length; i < n; i++) {
                    result[i] = nodes[i]
                }
            }
        } catch (e) {
            return false;
        }
        return result;
    };
    /**
     * 选择器
     * @param {String} expr CSS表达式
     * @param {Node}   context 上下文（可选）
     * @param {Array}  result  结果集(内部使用)
     * @param {Array}  lastResult  上次的结果集(内部使用)
     * @param {Boolean}flag_xml 是否为XML文档(内部使用)
     * @param {Boolean}flag_multi 是否出现并联选择器(内部使用)
     * @param {Boolean}flag_dirty 是否出现通配符选择器(内部使用)
     * @return {Array} result
     */
    //http://webbugtrack.blogspot.com/
    var Icarus = $.query = function(expr, contexts, result, lastResult, flag_xml, flag_multi, flag_dirty) {
        result = result || [];
        contexts = contexts || DOC;
        var pushResult = makeArray;
        if (!contexts.nodeType) { //实现对多上下文的支持
            contexts = pushResult(contexts);
            if (!contexts.length) return result
        } else {
            contexts = [contexts];
        }
        var rrelative = reg_combinator,
            //保存到本地作用域
            rquick = reg_quick,
            rBackslash = reg_backslash,
            rcomma = reg_comma,
            //用于切割并联选择器
            context = contexts[0],
            doc = context.ownerDocument || context,
            rtag = reg_tag,
            flag_all, uniqResult, elems, nodes, tagName, last, ri, uid;
        //将这次得到的结果集放到最终结果集中
        //如果要从多个上下文中过滤孩子
        expr = expr.replace(trimLeft, "").replace(trimRight, "");
        flag_xml = flag_xml !== void 0 ? flag_xml : $.isXML(doc);
        if (flag_xml && expr === "body" && context.body) return pushResult([context.body], result, flag_multi);
        if (!flag_xml && doc.querySelectorAll) {
            var query = expr;
            if (contexts.length > 2 || doc.documentMode == 8 && context.nodeType == 1) {
                if (contexts.length > 2) context = doc;
                query = ".fix_icarus_sqa " + query; //IE8也要使用类名确保查找范围
                for (var i = 0, node; node = contexts[i++];) {
                    if (node.nodeType === 1) {
                        node.className = "fix_icarus_sqa " + node.className;
                    }
                }
            }
            if (doc.documentMode !== 8 || context.nodeName.toLowerCase() !== "object") {
                try {
                    return pushResult(context.querySelectorAll(query), result, flag_multi);
                } catch (e) {} finally {
                    if (query.indexOf(".fix_icarus_sqa") === 0) { //如果为上下文添加了类名，就要去掉类名
                        for (i = 0; node = contexts[i++];) {
                            if (node.nodeType === 1) {
                                node.className = node.className.replace("fix_icarus_sqa ", "");
                            }
                        }
                    }
                }
            }
        }
        var match = expr.match(rquick);
        if (match) { //对只有单个标签，类名或ID的选择器进行提速
            var value = match[2].replace(rBackslash, ""),
                key = match[1];
            if (key == "") { //tagName;
                nodes = getElementsByTagName(value, contexts, flag_xml);
            } else if (key === "." && contexts.length === 1) { //className，并且上下文只有1个
                if (flag_xml) { //如果XPATH查找失败，就会返回字符，那些我们就使用普通方式去查找
                    nodes = getElementsByXPath("//*[@class='" + value + "']", context, doc);
                } else if (context.getElementsByClassName) {
                    nodes = context.getElementsByClassName(value);
                }
            } else if (key === "#" && contexts.length === 1) { //ID，并且上下文只有1个
                if (flag_xml) {
                    nodes = getElementsByXPath("//*[@id='" + value + "']", context, doc);
                    //基于document的查找是不安全的，因为生成的节点可能还没有加入DOM树，比如$("<div id=\"A'B~C.D[E]\"><p>foo</p></div>").find("p")
                } else if (context.nodeType == 9) {
                    node = doc.getElementById(value);
                    //IE67 opera混淆表单元素，object以及链接的ID与NAME
                    //http://webbugtrack.blogspot.com/2007/08/bug-152-getelementbyid-returns.html
                    nodes = !node ? [] : !fixById ? [node] : node.getAttributeNode("id").nodeValue === value ? [node] : false;
                }
            }
            if (nodes) {
                return pushResult(nodes, result, flag_multi);
            }
        }
        //执行效率应该是内大外小更高一写
        lastResult = contexts;
        if (lastResult.length) {
            loop: while (expr && last !== expr) {
                flag_dirty = false;
                elems = null;
                uniqResult = {};
                //处理夹在中间的关系选择器（取得连接符及其后的标签选择器或通配符选择器）
                if (match = expr.match(rrelative)) {
                    expr = RegExp.rightContext;
                    elems = [];
                    tagName = (flag_xml ? match[2] : match[2].toUpperCase()).replace(rBackslash, "") || "*";
                    i = 0;
                    ri = 0;
                    flag_all = tagName === "*"; // 表示无需判定tagName
                    switch (match[1]) { //根据连接符取得种子集的亲戚，组成新的种子集
                        case " ":
                            //后代选择器
                            if (expr.length || match[2]) { //如果后面还跟着东西或最后的字符是通配符
                                elems = getElementsByTagName(tagName, lastResult, flag_xml);
                            } else {
                                elems = lastResult;
                                break loop
                            }
                            break;
                        case ">":
                            //亲子选择器
                            while ((node = lastResult[i++])) {
                                for (node = node.firstChild; node; node = node.nextSibling) {
                                    if (node.nodeType === 1 && (flag_all || tagName === node.nodeName)) {
                                        elems[ri++] = node;
                                    }
                                }
                            }
                            break;
                        case "+":
                            //相邻选择器
                            while ((node = lastResult[i++])) {
                                while ((node = node.nextSibling)) {
                                    if (node.nodeType === 1) {
                                        if (flag_all || tagName === node.nodeName) elems[ri++] = node;
                                        break;
                                    }
                                }
                            }
                            break;
                        case "~":
                            //兄长选择器
                            while ((node = lastResult[i++])) {
                                while ((node = node.nextSibling)) {
                                    if (node.nodeType === 1 && (flag_all || tagName === node.nodeName)) {
                                        uid = $.getUid(node);
                                        if (uniqResult[uid]) {
                                            break;
                                        } else {
                                            uniqResult[uid] = elems[ri++] = node;
                                        }
                                    }
                                }
                            }
                            elems = $.unique(elems);
                            break;
                    }
                } else if (match = expr.match(rtag)) { //处理位于最开始的或并联选择器之后的标签选择器或通配符
                    expr = RegExp.rightContext;
                    elems = getElementsByTagName(match[1].replace(rBackslash, ""), lastResult, flag_xml);
                }

                if (expr) {
                    var arr = Icarus.filter(expr, elems, lastResult, doc, flag_xml);
                    expr = arr[0];
                    elems = arr[1];
                    if (!elems) {
                        flag_dirty = true;
                        elems = getElementsByTagName("*", lastResult, flag_xml);
                    }
                    if (match = expr.match(rcomma)) {
                        expr = RegExp.rightContext;
                        pushResult(elems, result);
                        return Icarus(expr, contexts, result, [], flag_xml, true, flag_dirty);
                    } else {
                        lastResult = elems;
                    }
                }

            }
        }
        if (flag_multi) {
            if (elems.length) {
                return pushResult(elems, result, flag_multi);
            }
        } else if (DOC !== doc || fixByTag && flag_dirty) {
            for (result = [], ri = 0, i = 0; node = elems[i++];)
            if (node.nodeType === 1) result[ri++] = node;
            return result;
        }
        return elems;
    };
    var onePosition = $.oneObject("eq,gt,lt,first,last,even,odd");

    $.mix(Icarus, {
        //getAttribute总会返回字符串
        //http://reference.sitepoint.com/javascript/Element/getAttribute
        getAttribute: !fixGetAttribute ? function(elem, name) {
            return elem.getAttribute(name) || '';
        } : function(elem, name, flag_xml) {
            if (flag_xml) return elem.getAttribute(name) || '';
            name = name.toLowerCase();
            //http://jsfox.cn/blog/javascript/get-right-href-attribute.html
            if (attrURL[name]) { //得到href属性里原始链接，不自动转绝对地址、汉字和符号都不编码
                return elem.getAttribute(name, 2) || ''
            }
            if (name === "style") {
                return elem.style.cssText.toLowerCase();
            }
            if (elem.tagName === "INPUT" && name == "type") {
                return elem.getAttribute("type") || elem.type; //IE67无法辩识HTML5添加添加的input类型，如input[type=search]，不能使用el.type与el.getAttributeNode去取。
            }
            //布尔属性，如果为true时则返回其属性名，否则返回空字符串，其他一律使用getAttributeNode
            var attr = boolOne[name] ? (elem.getAttribute(name) ? name : '') : (elem = elem.getAttributeNode(name)) && elem.value || '';
            return reg_sensitive.test(name) ? attr : attr.toLowerCase();
        },
        hasAttribute: !fixHasAttribute ? function(elem, name, flag_xml) {
            return flag_xml ? !! elem.getAttribute(name) : elem.hasAttribute(name);
        } : function(elem, name) {
            //http://help.dottoro.com/ljnqsrfe.php
            name = name.toLowerCase();
            //如果这个显式设置的属性是""，即使是outerHTML也寻不见其踪影
            elem = elem.getAttributeNode(name);
            return !!(elem && (elem.specified || elem.nodeValue));
        },
        filter: function(expr, elems, lastResult, doc, flag_xml, flag_get) {
            var rsequence = reg_sequence,
                rattrib = reg_attrib,
                rpseudo = reg_pseudo,
                rBackslash = reg_backslash,
                rattrval = reg_attrval,
                pushResult = makeArray,
                toHex = _toHex,
                _hash_op = hash_operator,
                parseNth = parse_nth,
                match, key, tmp;
            while (match = expr.match(rsequence)) { //主循环
                expr = RegExp.rightContext;
                key = (match[2] || "").replace(rBackslash, "");
                if (!elems) { //取得用于过滤的元素
                    if (lastResult.length === 1 && lastResult[0] === doc) {
                        switch (match[1]) {
                            case "#":
                                if (!flag_xml) { //FF chrome opera等XML文档中也存在getElementById，但不能用
                                    tmp = doc.getElementById(key);
                                    if (!tmp) {
                                        elems = [];
                                        continue;
                                    }
                                    //处理拥有name值为"id"的控件的form元素
                                    if (fixById ? tmp.id === key : tmp.getAttributeNode("id").nodeValue === key) {
                                        elems = [tmp];
                                        continue;
                                    }
                                }
                                break;
                            case ":":
                                switch (key) {
                                    case "root":
                                        elems = [doc.documentElement];
                                        continue;
                                    case "link":
                                        elems = pushResult(doc.links || []);
                                        continue;
                                }
                                break;
                        }
                    }
                    elems = getElementsByTagName("*", lastResult, flag_xml); //取得过滤元
                }
                //取得用于过滤的函数，函数参数或数组
                var filter = 0,
                    flag_not = false,
                    args;
                switch (match[1]) {
                    case "#":
                        //ID选择器
                        filter = ["id", "=", key];
                        break;
                    case ".":
                        //类选择器
                        filter = ["class", "~=", key];
                        break;
                    case ":":
                        //伪类选择器
                        tmp = Icarus.pseudoHooks[key];
                        if (match = expr.match(rpseudo)) {
                            expr = RegExp.rightContext;
                            if ( !! ~key.indexOf("nth")) {
                                args = parseNth[match[1]] || parseNth(match[1]);
                            } else {
                                args = match[3] || match[2] || match[1]
                            }
                        }
                        if (tmp) {
                            filter = tmp;
                        } else if (key === "not") {
                            flag_not = true;
                            if (args === "*") { //处理反选伪类中的通配符选择器
                                elems = [];
                            } else if (reg_tag.test(args)) { //处理反选伪类中的标签选择器
                                tmp = [];
                                match = flag_xml ? args : args.toUpperCase();
                                for (var i = 0, ri = 0, elem; elem = elems[i++];)
                                if (match !== elem.nodeName) tmp[ri++] = elem;
                                elems = tmp;
                            } else {
                                var obj = Icarus.filter(args, elems, lastResult, doc, flag_xml, true);
                                filter = obj.filter;
                                args = obj.args;
                            }
                        } else {
                            $.error('An invalid or illegal string was specified : "' + key + '"!');
                        }
                        break
                    default:
                        filter = [key.toLowerCase()];
                        if ((match = expr.match(rattrib))) {
                            expr = RegExp.rightContext;
                            if (match[1]) {
                                filter[1] = match[1]; //op
                                filter[2] = match[3] || match[4]; //对值进行转义
                                filter[2] = filter[2] ? filter[2].replace(rattrval, toHex).replace(rBackslash, "") : "";
                            }
                        }
                        break;
                }
                if (flag_get) {
                    return {
                        filter: filter,
                        args: args
                    }
                }
                //如果条件都俱备，就开始进行筛选 
                if (elems.length && filter) {
                    tmp = [];
                    i = 0;
                    ri = 0;
                    if (typeof filter === "function") { //如果是一些简单的伪类
                        if (onePosition[key]) {
                            //如果args为void则将集合的最大索引值传进去，否则将exp转换为数字
                            args = args === void 0 ? elems.length - 1 : ~~args;
                            for (; elem = elems[i];) {
                                if (filter(i++, args) ^ flag_not) tmp[ri++] = elem;
                            }
                        } else {
                            while ((elem = elems[i++])) {
                                if (( !! filter(elem, args)) ^ flag_not) tmp[ri++] = elem;
                            }
                        }
                    } else if (typeof filter.exec === "function") { //如果是子元素过滤伪类
                        tmp = filter.exec({
                            not: flag_not,
                            xml: flag_xml
                        }, elems, args, doc);
                    } else {
                        var name = filter[0],
                            op = _hash_op[filter[1]],
                            val = filter[2] || "",
                            flag, attr;
                        if (!flag_xml && name === "class" && op === 4) { //如果是类名
                            val = " " + val + " ";
                            while ((elem = elems[i++])) {
                                var className = elem.className;
                                if ( !! (className && (" " + className + " ").indexOf(val) > -1) ^ flag_not) {
                                    tmp[ri++] = elem;
                                }
                            }
                        } else {
                            if (!flag_xml && op && val && !reg_sensitive.test(name)) {
                                val = val.toLowerCase();
                            }
                            if (op === 4) {
                                val = " " + val + " ";
                            }
                            while ((elem = elems[i++])) {
                                if (!op) {
                                    flag = Icarus.hasAttribute(elem, name, flag_xml); //[title]
                                } else if (val === "" && op > 3) {
                                    flag = false
                                } else {
                                    attr = Icarus.getAttribute(elem, name, flag_xml);
                                    switch (op) {
                                        case 1:
                                            // = 属性值全等于给出值
                                            flag = attr === val;
                                            break;
                                        case 2:
                                            //!= 非标准，属性值不等于给出值
                                            flag = attr !== val;
                                            break;
                                        case 3:
                                            //|= 属性值以“-”分割成两部分，给出值等于其中一部分，或全等于属性值
                                            flag = attr === val || attr.substr(0, val.length + 1) === val + "-";
                                            break;
                                        case 4:
                                            //~= 属性值为多个单词，给出值为其中一个。
                                            flag = attr && (" " + attr + " ").indexOf(val) >= 0;
                                            break;
                                        case 5:
                                            //^= 属性值以给出值开头
                                            flag = attr && attr.indexOf(val) === 0;
                                            break;
                                        case 6:
                                            //$= 属性值以给出值结尾
                                            flag = attr && attr.substr(attr.length - val.length) === val;
                                            break;
                                        case 7:
                                            //*= 属性值包含给出值
                                            flag = attr && attr.indexOf(val) >= 0;
                                            break;
                                    }
                                }
                                if (flag ^ flag_not) tmp[ri++] = elem;
                            }
                        }
                    }
                    elems = tmp;
                }
            }
            return [expr, elems];
        }
    });

    //===================构建处理伪类的适配器=====================
    var filterPseudoHasExp = function(strchild, strsibling, type) {
        return {
            exec: function(flags, lastResult, args) {
                var result = [],
                    flag_not = flags.not,
                    child = strchild,
                    sibling = strsibling,
                    ofType = type,
                    cache = {},
                    lock = {},
                    a = args.a,
                    b = args.b,
                    i = 0,
                    ri = 0,
                    el, found, diff, count;
                if (!ofType && a === 1 && b === 0) {
                    return flag_not ? [] : lastResult;
                }
                var checkName = ofType ? "nodeName" : "nodeType";
                for (; el = lastResult[i++];) {
                    var parent = el.parentNode;
                    var pid = $.getUid(parent);
                    if (!lock[pid]) {
                        count = lock[pid] = 1;
                        var checkValue = ofType ? el.nodeName : 1;
                        for (var node = parent[child]; node; node = node[sibling]) {
                            if (node[checkName] === checkValue) {
                                pid = $.getUid(node);
                                cache[pid] = count++;
                            }
                        }
                    }
                    diff = cache[$.getUid(el)] - b;
                    found = a === 0 ? diff === 0 : (diff % a === 0 && diff / a >= 0);
                    (found ^ flag_not) && (result[ri++] = el);
                }
                return result;
            }
        };
    };

    function filterPseudoNoExp(name, isLast, isOnly) {
        var A = "var result = [], flag_not = flags.not, node, el, tagName, i = 0, ri = 0, found = 0; for (; node = el = lastResult[i++];found = 0) {"
        var B = "{0} while (!found && (node=node.{1})) { (node.{2} === {3})  && ++found;  }";
        var C = " node = el;while (!found && (node = node.previousSibling)) {  node.{2} === {3} && ++found;  }";
        var D = "!found ^ flag_not && (result[ri++] = el);  }   return result";

        var start = isLast ? "nextSibling" : "previousSibling";
        var fills = {
            type: [" tagName = el.nodeName;", start, "nodeName", "tagName"],
            child: ["", start, "nodeType", "1"]
        }
        [name];
        var body = A + B + (isOnly ? C : "") + D;
        var fn = new Function("flags", "lastResult", body.replace(/{(\d)}/g, function($, $1) {
            return fills[$1];
        }));
        return {
            exec: fn
        }
    }

    function filterProp(str_prop, flag) {
        return {
            exec: function(flags, elems) {
                var result = [],
                    prop = str_prop,
                    flag_not = flag ? flags.not : !flags.not;
                for (var i = 0, ri = 0, elem; elem = elems[i++];)
                if (elem[prop] ^ flag_not) result[ri++] = elem; //&& ( !flag || elem.type !== "hidden" )
                return result;
            }
        };
    };
    Icarus.pseudoHooks = {
        root: function(el) { //标准
            return el === (el.ownerDocument || el.document).documentElement;
        },
        target: { //标准
            exec: function(flags, elems, _, doc) {
                var result = [],
                    flag_not = flags.not;
                var win = doc.defaultView || doc.parentWindow;
                var hash = win.location.hash.slice(1);
                for (var i = 0, ri = 0, elem; elem = elems[i++];)
                if (((elem.id || elem.name) === hash) ^ flag_not) result[ri++] = elem;
                return result;
            }
        },
        "first-child": filterPseudoNoExp("child", false, false),
        "last-child": filterPseudoNoExp("child", true, false),
        "only-child": filterPseudoNoExp("child", true, true),
        "first-of-type": filterPseudoNoExp("type", false, false),
        "last-of-type": filterPseudoNoExp("type", true, false),
        "only-of-type": filterPseudoNoExp("type", true, true),
        //name, isLast, isOnly
        "nth-child": filterPseudoHasExp("firstChild", "nextSibling", false),
        //标准
        "nth-last-child": filterPseudoHasExp("lastChild", "previousSibling", false),
        //标准
        "nth-of-type": filterPseudoHasExp("firstChild", "nextSibling", true),
        //标准
        "nth-last-of-type": filterPseudoHasExp("lastChild", "previousSibling", true),
        //标准
        empty: function(elem) {
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) {
                    return false;
                }
            }
            return true;
        },
        link: { //标准
            exec: function(flags, elems) {
                var links = (elems[0].ownerDocument || elems[0].document).links;
                if (!links) return [];
                var result = [],
                    checked = {},
                    flag_not = flags.not;
                for (var i = 0, ri = 0, elem; elem = links[i++];)
                checked[$.getUid(elem)] = 1;
                for (i = 0; elem = elems[i++];)
                if (checked[$.getUid(elem)] ^ flag_not) result[ri++] = elem;
                return result;
            }
        },
        lang: { //标准 CSS3语言伪类
            exec: function(flags, elems, arg) {
                var result = [],
                    reg = new RegExp("^" + arg, "i"),
                    flag_not = flags.not;
                for (var i = 0, ri = 0, elem; elem = elems[i++];) {
                    var tmp = elem;
                    while (tmp && !tmp.getAttribute("lang"))
                    tmp = tmp.parentNode;
                    tmp = !! (tmp && reg.test(tmp.getAttribute("lang")));
                    if (tmp ^ flag_not) result[ri++] = elem;
                }
                return result;
            }
        },
        active: function(el) {
            return el === el.ownerDocument.activeElement;
        },
        focus: function(el) {
            return (el.type || el.href) && el === el.ownerDocument.activeElement;
        },
        indeterminate: function(node) { //标准
            return node.indeterminate === true && node.type === "checkbox"
        },
        //http://www.w3.org/TR/css3-selectors/#UIstates
        enabled: filterProp("disabled", false),
        //标准
        disabled: filterProp("disabled", true),
        //标准
        checked: filterProp("checked", true),
        //标准
        contains: {
            exec: function(flags, elems, arg) {
                var res = [],
                    fn = flags.xml ? $.getText : getHTMLText,
                    flag_not = flags.not;
                for (var i = 0, ri = 0, elem; elem = elems[i++];) {
                    if (( !! ~fn([elem]).indexOf(arg)) ^ flag_not) res[ri++] = elem;
                }
                return res;
            }
        },
        //自定义伪类
        selected: function(el) {
            el.parentNode && el.parentNode.selectedIndex; //处理safari的bug
            return el.selected === true;
        },
        header: function(el) {
            return /h\d/i.test(el.nodeName);
        },
        button: function(el) {
            return "button" === el.type || el.nodeName === "BUTTON";
        },
        input: function(el) {
            return /input|select|textarea|button/i.test(el.nodeName);
        },
        parent: function(el) {
            return !!el.firstChild;
        },
        has: function(el, expr) { //孩子中是否拥有匹配expr的节点
            return !!$.query(expr, [el]).length;
        },
        //与位置相关的过滤器
        first: function(index) {
            return index === 0;
        },
        last: function(index, num) {
            return index === num;
        },
        even: function(index) {
            return index % 2 === 0;
        },
        odd: function(index) {
            return index % 2 === 1;
        },
        lt: function(index, num) {
            return index < num;
        },
        gt: function(index, num) {
            return index > num;
        },
        eq: function(index, num) {
            return index === num;
        },
        hidden: function(el) { // Opera <= 12.12 reports offsetWidths and offsetHeights less than zero on some elements
            return el.offsetWidth <= 0 || el.offsetHeight <= 0 || (el.currentStyle || {}).display == "none";
        }
    }
    Icarus.pseudoHooks.visible = function(el) {
        return !Icarus.pseudoHooks.hidden(el);
    }

    "text,radio,checkbox,file,password,submit,image,reset".replace($.rword, function(name) {
        Icarus.pseudoHooks[name] = function(el) {
            return (el.getAttribute("type") || el.type) === name; //避开HTML5新增类型导致的BUG，不直接使用el.type === name;
        }
    });
    return Icarus;
})(window.mass, window);
/**
 2011.10.25重构$.unique
 2011.10.26支持对拥有name值为id的控件的表单元素的查找，添加labed语句，让元素不存在时更快跳出主循环
 2011.10.30让属性选择器支持拥有多个中括号与转义符的属性表达式，如‘input[name=brackets\\[5\\]\\[\\]]’
 2011.10.31重构属性选择器处理无操作部分，使用hasAttribute来判定用户是否显示使用此属性，并支持checked, selected, disabled等布尔属性
 2011.10.31重构关系选择器部分，让后代选择器也出现在switch分支中
 2011.11.1 重构子元素过滤伪类的两个生成函数filterPseudoHasExp filterPseudoNoExp
 2011.11.2 FIX处理 -of-type家族的BUG
 2011.11.3 添加getAttribute hasAttribute API
 2011.11.4 属性选择器对给出值或属性值为空字符串时进行快速过滤
 2011.11.5 添加getElementsByXpath 增加对XML的支持
 2011.11.6 重构getElementsByTagName 支持带命名空间的tagName
 2011.11.6 处理IE67与opera9在getElementById中的BUG
 2011.11.7 支持多上下文,对IE678的注释节点进行清除,优化querySelectorAll的使用
 2011.11.8 处理分解nth-child参数的BUG，修正IE67下getAttribute对input[type=search]的支持，重构sortOrder标准浏览器的部分
 调整swich...case中属性选择器的分支，因为reg_sequence允许出现"[  "的情况，因此会匹配不到，需要改为default
 修改属性选择器$=的判定，原先attr.indexOf(val) == attr.length - val.length，会导致"PWD".indexOf("bar]")也有true
 2011.11.9 增加getText 重构 getElementById与过滤ID部分
 2011.11.10 exec一律改为match,对parseNth的结果进行缓存
 2012.5.21 对body进行优化
 */


/*! lib/qatrix/qatrix-1.1.js */
/*
	Qatrix JavaScript v1.1

	Copyright (c) 2013, Angel Lai
	The Qatrix project is under MIT license.
	For details, see the Qatrix website: http://qatrix.com
*/

(function (window, document, undefined) {

var
	version = '1.1',

	docElem = document.documentElement,

	rbline = /(^\n+)|(\n+$)/g,
	rbrace = /^(?:\{.*\}|\[.*\])$/,
	rcamelCase = /-([a-z])/ig,
	rdigit = /\d/,
	rline = /\r\n/g,
	rnum = /[\-\+0-9\.]/ig,
	rspace = /\s+/,
	rquery = /\?/,
	ropacity = /opacity=([^)]*)/,
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

	animDisplay = 'height margin-top margin-bottom padding-top padding-bottom'.split(' '),
	
	// For $require loaded resource
	require_loaded = {},

	// For complied template
	template_cache = {},

	// For DOM ready
	readyList = [],
	ready = function ()
	{
		$each(readyList, function (i, callback)
		{
			callback();
		});
		document.removeEventListener('DOMContentLoaded', ready, false);
	},
	
	// For $append, $prepend, $before, $after
	nodeManip = function (elem, node)
	{
		var type = typeof node;

		if (type === 'string')
		{
			var doc = elem && elem.ownerDocument || document,
				fragment = doc.createDocumentFragment(),
				div = $new('div'),
				ret = [];

			div.innerHTML = node;
			while (div.childNodes[0] != null)
			{
				fragment.appendChild(div.childNodes[0]);
			}
			node = fragment;

			// Release  memory
			div = null;
		}

		if (type === 'number')
		{
			node += '';
		}

		return node;
	},
	
	// For map function callback
	mapcall = function (match, callback)
	{
		if (match === null)
		{
			return;
		}

		if (callback === undefined)
		{
			return match;
		}

		var i = 0,
			length = match.length;

		if (length !== undefined)
		{
			if (length > 0)
			{
				for (; i < length;)
				{
					if (callback.call(match[i], match[i], match[i++]) === false)
					{
						break;
					}
				}
			}

			return match;
		}
		else
		{
			return callback.call(match, match);
		}
	},

	// For $show and $hide
	displayElem = function (elem, type, duration, callback)
	{
		return mapcall(elem, function (elem)
		{
			var prop = {},
				show = type === 'show',
				style = elem.style,
				display = elem['_display'],
				temp, overflow;

			if (!display)
			{
				display = $style.get(elem, 'display');
				if (display === 'none' || display === 'inherit')
				{
					temp = $append(document.body, $new(elem.nodeName));
					display = $style.get(temp, 'display');
					$remove(temp);
				}
				elem['_display'] = display;
			}

			if (show)
			{
				style.display = display;
			}
			else
			{
				display = 'none';
			}

			if (duration)
			{
				overflow = $style.get(elem, 'overflow');
				style.overflow = 'hidden';

				prop.opacity = show ? {
					from: 0,
					to: 1
				} : {
					from: 1,
					to: 0
				};

				$each(animDisplay, function (i, css)
				{
					prop[css] = show ? {
						from: 0,
						to: $style.get(elem, css)
					} : 0;
				});
				$animate(elem, prop, duration, function ()
				{
					$each(animDisplay, function (i, css)
					{
						$css.set(elem, css, '');
					});
					style.filter = style.opacity = style.overflow = '';
					style.display = display;

					if (callback)
					{
						callback.call(elem);
					}
				});
			}
			else
			{
				style.display = display;
			}
		});
	},

	// For $ajax parameter
	addParam = function (prefix, data)
	{
		if (typeof data === 'object')
		{
			var rdata = [];

			$each(data, function (key, value)
			{
				if (typeof value === 'object')
				{
					rdata.push(addParam(prefix + '[' + key + ']', value));
				}
				else
				{
					rdata.push(prefix + '[' + $url(key) + ']=' + $url(value));
				}
			});

			return rdata.join('&');
		}
		else
		{
			return $url(prefix) + '=' + $url(data);
		}
	},

	removeEvent = document.removeEventListener ?
	function(elem, type, fn)
	{
		elem.removeEventListener(type, fn, false);
	} :
	function(elem, type, fn)
	{
		elem.detachEvent('on' + type, fn);
	},

	Qatrix = {
	$: function (id)
	{
		return document.getElementById(id);
	},

	$each: function (haystack, callback)
	{
		var i = 0,
			length = haystack.length,
			type = typeof haystack,
			name;

		if (type === 'array' || (type === 'object' && (length - 1) in haystack))
		{
			for (; i < length;)
			{
				if (callback.call(haystack[i], i, haystack[i++]) === false)
				{
					break;
				}
			}
		}
		else if (type === 'object')
		{
			for (name in haystack)
			{
				callback.call(haystack[name], name, haystack[name]);
			}
		}
		else
		{
			callback.call(haystack, 0, haystack);
		}

		return haystack;
	},

	$id: function (id, callback)
	{
		var match = [],
			elem;

		$each(id instanceof Array ? id : id.split(' '), function (i, item)
		{
			elem = $(item);
			if (elem !== null)
			{
				match.push(elem);
			}
		});

		return callback ? mapcall(match, callback) : match;
	},

	$dom: function (dom, callback)
	{
		if (callback)
		{
			dom.length ? mapcall(dom, callback) : callback(dom);
		}

		return dom;
	},

	$tag: function (elem, name, callback)
	{
		return mapcall(elem.getElementsByTagName(name), callback);
	},

	$class: document.getElementsByClassName ?
	function (elem, className, callback)
	{
		return mapcall(elem.getElementsByClassName(className), callback);
	} :
	function (elem, className, callback)
	{
		var match = [],
			rclass = new RegExp("(^|\\s)" + className + "(\\s|$)");

		$tag(elem, '*', function (item)
		{
			if (rclass.test(item.className))
			{
				match.push(item);
			}
		});

		return mapcall(match, callback);
	},

	$select: document.querySelectorAll ?
	function (selector, callback)
	{
		return mapcall(document.querySelectorAll(selector), callback);
	} :
	// Hack native CSS selector quering matched element for IE6/7
	function (selector, callback)
	{
		var style = Qatrix.Qselector.styleSheet,
			match = [];

		style.addRule(selector, 'q:a');
		$tag(document, '*', function (item)
		{
			if (item.currentStyle.q === 'a')
			{
				match.push(item);
			}
		});
		style.cssText = '';

		return mapcall(match, callback);
	},

	$new: function (tag, properties)
	{
		var elem = document.createElement(tag);

		if (properties)
		{
			try
			{
				$each(properties, function (name, property)
				{
					switch (name)
					{
						case 'css':
						case 'style':
							$css.set(elem, property);
							break;

						case 'innerHTML':
						case 'html':
							$html(elem, property);
							break;

						case 'className':
						case 'class':
							$className.set(elem, property);
							break;

						case 'text':
							$text(elem, property);
							break;

						default:
							$attr.set(elem, name, property);
							break;
					}
				});

				return elem;
			}
			catch (e)
			{}
			finally
			{
				// Prevent memory leak
				elem = null;
			}
		}

		return elem;
	},

	$string: {
		camelCase: function (string)
		{
			return string.replace('-ms-', 'ms-').replace(rcamelCase, function (match, letter)
			{
				return (letter + '').toUpperCase();
			});
		},

		replace: function (string, replacements)
		{
			for (var key in replacements)
			{
				string = string.replace(new RegExp(key, 'ig'), replacements[key]);
			}

			return string;
		},

		slashes: function (string)
		{
			return $string.replace(string, {
				"\\\\": '\\\\',
				"\b": '\\b',
				"\t": '\\t',
				"\n": '\\n',
				"\r": '\\r',
				'"': '\\"'
			});
		},

		trim: "".trim ?
		function (string)
		{
			return string.trim();
		} :
		function (string)
		{
			return (string + '').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
		}
	},

	$attr: {
		get: function (elem, name)
		{
			return elem.getAttribute(name);
		},

		set: function (elem, name, value)
		{
			return mapcall(elem, function (elem)
			{
				elem.setAttribute(name, value);
			});
		},

		remove: function (elem, name)
		{
			return mapcall(elem, function (elem)
			{
				elem.removeAttribute(name);
			});
		}
	},

	$data: {
		get: function (elem, name)
		{
			var value = $attr.get(elem, 'data-' + name);

			return value === "true" ? true :
				value === "false" ? false :
				value === "null" ? '' :
				value === null ? '' :
				value === '' ? '' :
				!isNaN(parseFloat(value)) && isFinite(value) ? +value :
				rbrace.test(value) ? $json.decode(value) :
				value;
		},

		set: function (elem, name, value)
		{
			return mapcall(elem, function (elem)
			{
				value = typeof value === 'object' ? $json.encode(value) : value;
				typeof name === 'object' ? $each(name, function (key, value)
				{
					$attr.set(elem, 'data-' + key, value);
				}) : $attr.set(elem, 'data-' + name, value);

				return elem;
			});
		},

		remove: function (elem, name)
		{
			return mapcall(elem, function (elem)
			{
				$attr.remove(elem, 'data-' + name);
			});
		}
	},

	$storage: window.localStorage ?
	{
		set: function (name, value)
		{
			localStorage[name] = typeof value === 'object' ? $json.encode(value) : value;
		},

		get: function (name)
		{
			var data = localStorage[name];

			if ($json.isJSON(data))
			{
				return $json.decode(data);
			}

			return data || '';
		},

		remove: function (name)
		{
			localStorage.removeItem(name);

			return true;
		}
	} :
	{
		set: function (name, value)
		{
			value = typeof value === 'object' ? $json.encode(value) : value;
			$data.set(Qatrix.storage, name, value);
			Qatrix.storage.save('Qstorage');
		},

		get: function (name)
		{
			Qatrix.storage.load('Qstorage');

			return $data.get(Qatrix.storage, name) || '';
		},

		remove: function (name)
		{
			Qatrix.storage.load('Qstorage');
			$data.remove(Qatrix.storage, name);

			return true;
		}
	},

	$event: {
		guid: 0,

		global: {},

		handler: {
			call: function (event, target, delegate_event, fn)
			{
				var handler = $event.handler;

				delegate_event.currentTarget = target;

				if (fn === false || fn.call(target, delegate_event) === false)
				{
					handler.stopPropagation.call(delegate_event);
					handler.preventDefault.call(delegate_event);
				}
			},

			preventDefault: function ()
			{
				var original = this.originalEvent;

				if (original.preventDefault)
				{
					original.preventDefault();
				}
			},

			stopPropagation: function ()
			{
				var original = this.originalEvent;

				if (original.stopPropagation)
				{
					original.stopPropagation();
				}
			},

			stopImmediatePropagation: function()
			{
				this.stopPropagation();
			},

			mouseenter: function (handler)
			{
				return function (event)
				{
					var target = event.relatedTarget;

					if (this === target)
					{
						return;
					}

					while (target && target !== this)
					{
						target = target.parentNode;
					}

					if (target === this)
					{
						return;
					}

					handler.call(this, event);
				}
			}
		},

		on: function (context, types, selector, data, fn)
		{
			return mapcall(context, function (elem)
			{
				if (elem.nodeType === 3 || elem.nodeType === 8)
				{
					return false;
				}

				if (typeof types === 'object')
				{
					if (typeof selector !== 'string')
					{
						data = data || selector;
						selector = undefined;
					}

					for (type in types)
					{
						$event.on(elem, type, selector, data, types[type]);
					}

					return this;
				}

				if (data == null && fn == null)
				{
					fn = selector;
					data = selector = undefined;
				}
				else if (fn == null)
				{
					if (typeof selector === 'string')
					{
						fn = data;
						data = undefined;
					}
					else
					{
						fn = data;
						data = selector;
						selector = undefined;
					}
				}

				if (elem.guid === undefined)
				{
					$event.guid++;
					elem.guid = $event.guid;
					$event.global[ $event.guid ] = {};
				}

				var guid = elem.guid,
					event_key = (selector || '') + types,
					events = $event.global[ guid ][ event_key ];

				if (!events)
				{
					$event.global[ guid ][ event_key ] = {};
				}

				delegate_fn = function (event)
				{
					var delegate_event = {},
						match = null,
						classSelector,
						event_prop = 'altKey bubbles button buttons cancelable relatedTarget clientX clientY ctrlKey fromElement offsetX offsetY pageX pageY screenX screenY shiftKey toElement timeStamp'.split(' '),
						target;

					$each(event_prop, function (i, key)
					{
						if (event[key] !== undefined)
						{
							delegate_event[key] = event[key];
						}
					});
					delegate_event.originalEvent = event;
					delegate_event.preventDefault = $event.handler.preventDefault;
					delegate_event.stopPropagation = $event.handler.stopPropagation;
					delegate_event.stopImmediatePropagation = $event.handler.stopImmediatePropagation;

					delegate_event.data = data;

					target = delegate_event.target = !selector ? elem : event.target || event.srcElement || document;

					delegate_event.which = event.which || event.charCode || event.keyCode;
					
					delegate_event.metaKey = event.metaKey || event.ctrlKey;

					if (!selector)
					{
						$event.handler.call(event, target, delegate_event, fn);
					}
					else
					{
						classSelector = selector ? selector.replace('.', '') : '';

						for (; target !== elem; target = target.parentNode)
						{
							if (target === null || target === document.body)
							{
								return false;
							}

							if (target.tagName.toLowerCase() === selector || $className.has(target, classSelector))
							{
								$event.handler.call(event, target, delegate_event, fn);
							}
						}
					}
				};

				if (elem.addEventListener)
				{
					if (types === 'mouseenter' || types === 'mouseleave')
					{
						types = types === 'mouseenter' ? 'mouseover' : 'mouseout';
						delegate_fn = $event.handler.mouseenter(delegate_fn);
					}

					elem.addEventListener(types, delegate_fn, (types === 'blur' || types === 'focus'));
				}
				else
				{
					elem.attachEvent('on' + types, delegate_fn);
				}

				$event.global[ guid ][ event_key ][ fn + '' ] = delegate_fn;

				return elem;
			});
		},

		off: function (context, types, selector, fn)
		{
			if (typeof types === 'object')
			{
				for (type in types)
				{
					$event.off(context, type, types[type]);
				}
				return this;
			}

			if (fn == null)
			{
				fn = selector;
				selector = null;
			}

			var guid = context.guid,
				event_key = (selector || '') + types;
				fn_key = fn + '';

			if (!fn)
			{
				$each($event.global[ guid ][ event_key ], function (i, item)
				{
					removeEvent(context, types, item);
				});
				delete $event.global[ guid ][ event_key ];
			}
			else
			{
				removeEvent(context, types, $event.global[ guid ][ event_key ][ fn_key ]);
				delete $event.global[ guid ][ event_key ][ fn_key ];
			}
		}
	},

	$clear: function (timer)
	{
		if (timer)
		{
			clearTimeout(timer);
			clearInterval(timer);
		}

		return null;
	},

	$ready: function (callback)
	{
		if (document.readyState === 'complete')
		{
			return setTimeout(callback, 1);
		}
		if (document.addEventListener)
		{
			readyList.push(callback);
			document.addEventListener('DOMContentLoaded', ready, false);

			return;
		}
		// Hack IE DOM for ready event
		var domready = function ()
		{
			try
			{
				docElem.doScroll('left');
			}
			catch (e)
			{
				setTimeout(domready, 1);
				return;
			}
			callback();
		};
		domready();
	},

	$css: {
		get: function (elem, name)
		{
			if (typeof name === 'object')
			{
				var haystack = {};

				$each(name, function (i, property)
				{
					haystack[property] = $style.get(elem, property);
				});

				return haystack;
			}

			return $style.get(elem, name);
		},

		set: function (elem, name, value)
		{
			return mapcall(elem, function (elem)
			{
				typeof name === 'object' ? $each(name, function (propertyName, value)
				{
					$style.set(elem, $string.camelCase(propertyName), $css.fix(propertyName, value));
				}) : $style.set(elem, $string.camelCase(name), $css.fix(name, value));

				return elem;
			});
		},

		number: {
			'fontWeight': true,
			'lineHeight': true,
			'opacity': true,
			'zIndex': true
		},

		unit: function (name, value)
		{
			if ($css.number[name])
			{
				return '';
			}
			var unit = (value + '').replace(rnum, '');

			return unit === '' ? 'px' : unit;
		},

		fix: function (name, value)
		{
			if (typeof value === 'number' && !$css.number[name])
			{
				value += 'px';
			}

			return value === null && isNaN(value) ? false : value;
		}
	},

	$style: {
		get: window.getComputedStyle ?
		function (elem, property)
		{
			if (elem !== null)
			{
				var value = document.defaultView.getComputedStyle(elem, null).getPropertyValue(property);

				return value === 'auto' || value === '' ? 0 : value;
			}

			return false;
		} :
		function (elem, property)
		{
			if (elem !== null)
			{
				var value = property === 'opacity' ? ropacity.test(elem.currentStyle['filter']) ?
					(0.01 * parseFloat(RegExp.$1)) + '' :
					1 : elem.currentStyle[$string.camelCase(property)];

				return value === 'auto' ? 0 : value;
			}

			return false;
		},

		set: docElem.style.opacity !== undefined ?
		function (elem, name, value)
		{
			return mapcall(elem, function (elem)
			{
				elem.style[name] = value;

				return true;
			});
		} :
		function (elem, name, value)
		{
			return mapcall(elem, function (elem)
			{
				if (!elem.currentStyle || !elem.currentStyle.hasLayout)
				{
					elem.style.zoom = 1;
				}

				if (name === 'opacity')
				{
					elem.style.filter = 'alpha(opacity=' + value * 100 + ')';
					elem.style.zoom = 1;
				}
				else
				{
					elem.style[name] = value;
				}

				return true;
			});
		}
	},

	$pos: function (elem, x, y)
	{
		return mapcall(elem, function (elem)
		{
			$style.set(elem, 'left', x + 'px');
			$style.set(elem, 'top', y + 'px');

			return elem;
		});
	},

	$offset: function (elem)
	{
		var body = document.body,
			box = elem.getBoundingClientRect();

		return {
			top: box.top + (window.scrollY || body.parentNode.scrollTop || elem.scrollTop) - (docElem.clientTop || body.clientTop || 0),
			left: box.left + (window.scrollX || body.parentNode.scrollLeft || elem.scrollLeft) - (docElem.clientLeft || body.clientLeft || 0),
			width: elem.offsetWidth,
			height: elem.offsetHeight
		};
	},

	$append: function (elem, node)
	{
		return mapcall(elem, function (elem)
		{
			return elem.appendChild(nodeManip(elem, node));
		});
	},

	$prepend: function (elem, node)
	{
		return mapcall(elem, function (elem)
		{
			return elem.firstChild ?
				elem.insertBefore(nodeManip(elem, node), elem.firstChild) :
				elem.appendChild(nodeManip(elem, node));
		});
	},

	$before: function (elem, node)
	{
		return mapcall(elem, function (elem)
		{
			return elem.parentNode.insertBefore(nodeManip(elem, node), elem);
		});
	},

	$after: function (elem, node)
	{
		return mapcall(elem, function (elem)
		{
			return elem.nextSibling ?
				elem.parentNode.insertBefore(nodeManip(elem, node), elem.nextSibling) :
				elem.parentNode.appendChild(nodeManip(elem, node));
		});
	},

	$remove: function (elem)
	{
		return mapcall(elem, function (elem)
		{
			$empty(elem);
			if (elem.guid !== undefined)
			{
				delete $event.global[elem.guid];
			}

			return elem !== null && elem.parentNode ? elem.parentNode.removeChild(elem) : elem;
		});
	},

	$empty: function (elem)
	{
		return mapcall(elem, function (elem)
		{
			while (elem.firstChild)
			{
				if (elem.nodeType === 1 && elem.guid !== undefined)
				{
					delete $event.global[elem.guid];
				}
				elem.removeChild(elem.firstChild);
			}
			
			return elem;
		});
	},

	$html: function (elem, html)
	{
		return mapcall(elem, function (elem)
		{
			if (html)
			{
				try
				{
					elem.innerHTML = html;
				}
				catch (e)
				{
					$append($empty(elem), html);
				}
				return elem;
			}

			return elem.nodeType === 1 ? elem.innerHTML : null;
		});
	},

	$text: function (elem, text)
	{
		// Retrieve the text value
		// textContent and innerText returns different results from different browser
		// So it have to rewrite the process method
		return mapcall(elem, function (elem)
		{
			if (text)
			{
				// Set text node.
				$empty(elem);
				elem.appendChild(document.createTextNode(text));

				return elem;
			}
			else
			{
				var rtext = '',
					textContent = elem.textContent,
					nodeType;

				// If the content of elem is text only
				if ((textContent || elem.innerText) === elem.innerHTML)
				{
					rtext = textContent ? $string.trim(elem.textContent.replace(rbline, '')) : elem.innerText.replace(rline, '');
				}
				else
				{
					for (elem = elem.firstChild; elem; elem = elem.nextSibling)
					{
						nodeType = elem.nodeType;

						if (nodeType === 3 && $string.trim(elem.nodeValue) !== '')
						{
							rtext += elem.nodeValue.replace(rbline, '') + (elem.nextSibling && elem.nextSibling.tagName && elem.nextSibling.tagName.toLowerCase() !== 'br' ? "\n" : '');
						}

						if (nodeType === 1 || nodeType === 2)
						{
							rtext += $text(elem) + ($style.get(elem, 'display') === 'block' || elem.tagName.toLowerCase() === 'br' ? "\n" : '');
						}
					}
				}

				return rtext;
			}
		});
	},

	$className: {
		add: function (elem, name)
		{
			return mapcall(elem, function (elem)
			{
				if (elem.className === '')
				{
					elem.className = name;
				}
				else
				{
					var ori = elem.className,
						nclass = [];

					$each(name.split(rspace), function (i, item)
					{
						if (!new RegExp('\\b(' + item + ')\\b').test(ori))
						{
							nclass.push(' ' + item);
						}
					});
					elem.className += nclass.join('');
				}

				return elem;
			});
		},

		set: function (elem, name)
		{
			return mapcall(elem, function (elem)
			{
				elem.className = name;

				return elem;
			});
		},

		has: function (elem, name)
		{
			return new RegExp('\\b(' + name.split(rspace).join('|') + ')\\b').test(elem.className);
		},

		remove: function (elem, name)
		{
			return mapcall(elem, function (elem)
			{
				elem.className = name ? $string.trim(
					elem.className.replace(
						new RegExp('\\b(' + name.split(rspace).join('|') + ')\\b', 'g'), '')
						.split(rspace)
						.join(' ')
				) : '';

				return elem;
			});
		}
	},

	$hide: function (elem, duration, callback)
	{
		displayElem(elem, 'hide', duration, callback);
	},

	$show: function (elem, duration, callback)
	{
		displayElem(elem, 'show', duration, callback);
	},

	$toggle: function (elem, duration, callback)
	{
		return mapcall(elem, function (elem)
		{
			$style.get(elem, 'display') === 'none' ?
				$show(elem, duration, callback) :
				$hide(elem, duration, callback);
		});
	},

	$animate: (function ()
	{
		// Use CSS3 native transition for animation as possible
		var style = docElem.style;

		return (
			style.webkitTransition !== undefined ||
			style.MozTransition !== undefined ||
			style.OTransition !== undefined ||
			style.msTransition !== undefined ||
			style.transition !== undefined
		);
	}()) ?
	(function ()
	{
		var style = docElem.style,
			prefix_name = style.webkitTransition !== undefined ? 'Webkit' :
				style.MozTransition !== undefined ? 'Moz' :
				style.OTransition !== undefined ? 'O' :
				style.msTransition !== undefined ? 'ms' : '',
			transition_name = prefix_name + 'Transition';

		return function (elem, properties, duration, callback)
		{
			return mapcall(elem, function (elem)
			{
				var css_value = [],
					css_name = [],
					unit = [],
					css_style = [],
					style = elem.style,
					css, offset;

				duration = duration || 300;

				for (css in properties)
				{
					css_name[css] = $string.camelCase(css);
					if (properties[css].from !== undefined)
					{
						properties[css].to = properties[css].to || 0;
						css_value[css] = !$css.number[css] ? parseInt(properties[css].to, 10) : properties[css].to;
						unit[css] = $css.unit(css, properties[css].to);
						$style.set(elem, css_name[css], parseInt(properties[css].from, 10) + unit[css]);
					}
					else
					{
						css_value[css] = !$css.number[css] ? parseInt(properties[css], 10) : properties[css];
						unit[css] = $css.unit(css, properties[css]);
						$style.set(elem, css_name[css], $style.get(elem, css_name[css]));
					}
					css_style.push(css);
				}

				setTimeout(function ()
				{
					style[transition_name] = 'all ' + duration + 'ms';
					
					$each(css_style, function (i, css)
					{
						style[css_name[css]] = css_value[css] + unit[css];
					});
				}, 15);

				// Animation completed
				setTimeout(function ()
				{
					// Clear up CSS transition property
					style[transition_name] = '';

					if (callback)
					{
						callback.call(elem);
					}
				}, duration);

				return elem;
			});
		}
	})() :
	function (elem, properties, duration, callback)
	{
		return mapcall(elem, function (elem)
		{
			var step = 0,
				i = 0,
				j = 0,
				length = 0,
				p = 30,
				css_to_value = [],
				css_from_value = [],
				css_name = [],
				css_unit = [],
				css_style = [],
				property_value, css, offset, timer;

			duration = duration || 300;

			for (css in properties)
			{
				css_name.push($string.camelCase(css));
				if (properties[css].from !== undefined)
				{
					property_value = properties[css].to;
					css_from_value.push(!$css.number[css] ? parseInt(properties[css].from, 10) : properties[css].from);
					$style.set(elem, css_name[i], css_from_value[i] + $css.unit(css, property_value));
				}
				else
				{
					property_value = properties[css];
					css_from_value.push(parseInt($style.get(elem, $string.camelCase(css)), 10));
				}
				css_to_value.push(!$css.number[css] ? parseInt(property_value, 10) : property_value);
				css_unit.push($css.unit(css, property_value));
				i++;
				length++;
			}
			// Pre-calculation for CSS value
			for (j = 0; j < p; j++)
			{
				css_style[j] = [];
				for (i = 0; i < length; i++)
				{
					css_style[j][css_name[i]] =
						(css_from_value[i] + (css_to_value[i] - css_from_value[i]) / p * j) +
						(css_name[i] === 'opacity' ? '' : css_unit[i]);
				}
			}

			for (; i < p; i++)
			{
				timer = setTimeout(function ()
				{
					for (i = 0; i < length; i++)
					{
						$style.set(elem, css_name[i], css_style[step][css_name[i]]);
					}
					step++;
				}, (duration / p) * i);
			}

			setTimeout(function ()
			{
				for (i = 0; i < length; i++)
				{
					$style.set(elem, css_name[i], css_to_value[i] + css_unit[i]);
				}
				if (callback)
				{
					callback.call(elem);
				}
			}, duration);

			return elem;
		});
	},

	$fadeout: function (elem, duration, callback)
	{
		return mapcall(elem, function (elem)
		{
			$animate(elem, {
				'opacity': {
					from: 1,
					to: 0
				}
			}, duration || 500, callback);
		});
	},
	
	$fadein: function (elem, duration, callback)
	{
		return mapcall(elem, function (elem)
		{
			$animate(elem, {
				'opacity': {
					from: 0,
					to: 1
				}
			}, duration || 500, callback);
		});
	},

	$cookie: {
		get: function (key)
		{
			var cookies = document.cookie.split('; '),
				i = 0,
				l = cookies.length,
				temp, value;

			for (; i < l; i++)
			{
				temp = cookies[i].split('=');
				if (temp[0] === key)
				{
					value = decodeURIComponent(temp[1]);

					return $json.isJSON(value) ? $json.decode(value) : value + '';
				}
			}

			return null;
		},

		set: function (key, value, expires)
		{
			if (typeof key === 'object')
			{
				expires = value;

				return $each(key, function (name, value)
				{
					$cookie.set(name, value, expires);
				});
			}

			var today = new Date();

			today.setTime(today.getTime());
			expires = expires ? ';expires=' + new Date(today.getTime() + expires * 86400000).toGMTString() : '';
			value = typeof value === 'object' ? $json.encode(value) : value;

			return document.cookie = key + '=' + $url(value) + expires + ';path=/';
		},

		remove: function ()
		{
			$each(arguments, function (i, key)
			{
				$cookie.set(key, '', -1);
			});

			return true;
		}
	},

	$json: {
		decode: window.JSON ?
		function (data)
		{
			return $json.isJSON(data) ? JSON.parse($string.trim(data)) : false;
		} :
		function (data)
		{
			return $json.isJSON(data) ? (new Function('return ' + $string.trim(data)))() : false;
		},

		encode: window.JSON ?
		function (data)
		{
			return JSON.stringify(data);
		} :
		function (data)
		{
			function stringify(data)
			{
				var temp = [],
					i, type, value, rvalue;

				for (i in data)
				{
					value = data[i];
					type = typeof value;

					if (type === 'undefined')
					{
						return;
					}

					if (type !== 'function')
					{
						switch (type)
						{
							case 'object':
								rvalue = value === null ? value :
								// For ISO date format
								value.getDay ?
									'"' + (1e3 - ~value.getUTCMonth() * 10 + value.toUTCString() + 1e3 + value / 1)
										.replace(/1(..).*?(\d\d)\D+(\d+).(\S+).*(...)/, '$3-$1-$2T$4.$5Z') + '"' :
								// For Array
								value.length ? '[' + (function ()
								{
									var rdata = [];
									$each(value, function (i, item)
									{
										rdata.push((typeof item === 'string' ? '"' + $string.slashes(item) + '"' : item));
									});

									return rdata.join(',');
								})() + ']' :
								// For Object
								$json.encode(value);
								break;

							case 'number':
								rvalue = !isFinite(value) ? null : value;
								break;

							case 'boolean':
							case 'null':
								rvalue = value;
								break;

							case 'string':
								rvalue = '"' + $string.slashes(value) + '"';
								break;
						}
						temp.push('"' + i + '"' + ':' + rvalue);
					}
				}

				return temp.join(',');
			}

			return '{' + stringify(data) + '}';
		},

		isJSON: function (string)
		{
			return typeof string === 'string' && $string.trim(string) !== '' ?
				rvalidchars.test(string
					.replace(rvalidescape, '@')
					.replace(rvalidtokens, ']')
					.replace(rvalidbraces, '')) :
				false;
		}
	},

	$ajax: function (url, options)
	{
		if (typeof url === 'object')
		{
			options = url;
			url = undefined;
		}

		options = options || {};

		var request = window.ActiveXObject ? new ActiveXObject('Microsoft.XMLHTTP') : new XMLHttpRequest(),
			url = url || options.url,
			param = [],
			response,
			data;

		if (options.data)
		{
			$each(options.data, function (key, value)
			{
				param.push(addParam(key, value));
			});
		}
		data = param.join('&').replace(/%20/g, '+');

		if (options.type === 'GET')
		{
			request.open('GET', url + (rquery.test(url) ? '&' : '?') + data, true);
			data = null;
		}
		else
		{	
			request.open(options.type || 'POST', url, true);
		}

		request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');

		if (options.header)
		{
			$each(options.header, function (key, value)
			{
				request.setRequestHeader(key, value);
			});
		}

		request.send(data);
		request.onreadystatechange = function ()
		{
			if (request.readyState === 4)
			{
				if (request.status === 200 && options.success)
				{
					data = request.responseText;
					options.success(data !== '' && $json.isJSON(data) ? $json.decode(data) : data);
				}
				else
				{
					if (options.error)
					{
						options.error(request.status);
					}
				}
			}
		};
	},

	$require: function (context, callback)
	{
		var queue = [],
			item;

		$each(context, function (i, src)
		{
			if (!require_loaded[src])
			{
				require_loaded[src] = true;
				queue.push(src);
				item = /\.css[^\.]*$/ig.test(src) ?

					$new('link', {
						'type': 'text/css',
						'rel': 'stylesheet',
						'href': src
					}) :
					
					$new('script', {
						'type': 'text/javascript',
						'async': true,
						'src': src
					});

				item.onload = item.onreadystatechange = function (event)
				{
					if (event.type === 'load' || (/loaded|complete/.test(item.readyState)))
					{
						queue.splice(queue.indexOf(src), 1);
						if (queue.length === 0 && callback)
						{
							callback();
						}
					}
				};
				$append(document.head || $tag(document, 'head')[0] || docElem, item);
			}
		});
	},

	$template: function (template, data)
	{
		var content = template_cache[template];

		if (!content)
		{
			content = "var s='';s+=\'" +
				template.replace(/[\r\t\n]/g, " ")
				.split("'").join("\\'")
				.split("\t").join("'")
				.replace(/\{\{#([\w]*)\}\}(.*)\{\{\/(\1)\}\}/ig, function (match, $1, $2)
				{
					return "\';var i=0,l=data." + $1 + ".length,d=data." + $1 + ";for(;i<l;i++){s+=\'" + $2.replace(/\{\{(\.|this)\}\}/g, "'+d[i]+'").replace(/\{\{([\w]*)\}\}/g, "'+d[i].$1+'") + "\'}s+=\'";
				})
				.replace(/\{\{(.+?)\}\}/g, "'+data.$1+'") +
				"';return s;";

			template_cache[template] = content;
		}
		
		return data ? new Function("data", content)(data) : new Function("data", content);
	},

	$url: function (data)
	{
		return encodeURIComponent(data);
	},

	$rand: function (min, max)
	{
		return Math.floor(Math.random() * (max - min + 1) + min);
	},

	$browser: (function(){
		var ua = navigator.userAgent.toLowerCase(),
			browser = {},
			data = 'msie|firefox|opera|webkit|iPad|iPhone|android'.split('|'),
			index = data.length,
			i = 6;

		while (index--)
		{
			browser[data[index]] = ua.indexOf(data[index].toLowerCase()) > -1;
		}

		for (; i < 12; i++)
		{
			browser['msie' + i] = ua.indexOf('msie ' + i) > -1;
		}

		browser.is = function (keyword)
		{
			return new RegExp(keyword, 'ig').test(ua);
		};

		return browser;
	}())
};

// Expose Qatrix functions to global
for (var fn in Qatrix)
{
	window[fn] = Qatrix[fn];
}

Qatrix.version = version;
window.Qatrix = Qatrix;

$ready(function ()
{
	// For hack CSS selector
	if (!document.querySelectorAll)
	{
		Qatrix.Qselector = $append(document.body, $new('style'));
	}
	// For hack storage
	if (!window.localStorage)
	{
		Qatrix.storage = $append(document.body, $new('link', {
			'style': {
				'behavior': 'url(#default#userData)'
			}
		}));
	}
});

// Define Qatrix as an AMD module
if (typeof define === 'function' && define.amd)
{
	define('qatrix', [], Qatrix);
}

// Create a shortcut for compression
})(window, document);


/*! lib/json/json2.js */
/*
    json2.js
    2012-10-08

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());



/*! lib/moment/moment.min.js */
// moment.js
// version : 2.0.0
// author : Tim Wood
// license : MIT
// momentjs.com
(function(t){function e(t,e){return function(n){return u(t.call(this,n),e)}}function n(t,e){return function(n){return this.lang().ordinal(t.call(this,n),e)}}function s(){}function r(t){a(this,t)}function i(t){var e=this._data={},n=t.years||t.year||t.y||0,s=t.months||t.month||t.M||0,r=t.weeks||t.week||t.w||0,i=t.days||t.day||t.d||0,a=t.hours||t.hour||t.h||0,u=t.minutes||t.minute||t.m||0,d=t.seconds||t.second||t.s||0,h=t.milliseconds||t.millisecond||t.ms||0;this._milliseconds=h+1e3*d+6e4*u+36e5*a,this._days=i+7*r,this._months=s+12*n,e.milliseconds=h%1e3,d+=o(h/1e3),e.seconds=d%60,u+=o(d/60),e.minutes=u%60,a+=o(u/60),e.hours=a%24,i+=o(a/24),i+=7*r,e.days=i%30,s+=o(i/30),e.months=s%12,n+=o(s/12),e.years=n}function a(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function o(t){return 0>t?Math.ceil(t):Math.floor(t)}function u(t,e){for(var n=t+"";e>n.length;)n="0"+n;return n}function d(t,e,n){var s,r=e._milliseconds,i=e._days,a=e._months;r&&t._d.setTime(+t+r*n),i&&t.date(t.date()+i*n),a&&(s=t.date(),t.date(1).month(t.month()+a*n).date(Math.min(s,t.daysInMonth())))}function h(t){return"[object Array]"===Object.prototype.toString.call(t)}function c(t,e){var n,s=Math.min(t.length,e.length),r=Math.abs(t.length-e.length),i=0;for(n=0;s>n;n++)~~t[n]!==~~e[n]&&i++;return i+r}function f(t){return t?se[t]||t.toLowerCase().replace(/(.)s$/,"$1"):t}function l(t,e){return e.abbr=t,U[t]||(U[t]=new s),U[t].set(e),U[t]}function _(t){return t?(!U[t]&&x&&require("./lang/"+t),U[t]):C.fn._lang}function m(t){return t.match(/\[.*\]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function y(t){var e,n,s=t.match(Z);for(e=0,n=s.length;n>e;e++)s[e]=oe[s[e]]?oe[s[e]]:m(s[e]);return function(r){var i="";for(e=0;n>e;e++)i+="function"==typeof s[e].call?s[e].call(r,t):s[e];return i}}function M(t,e){function n(e){return t.lang().longDateFormat(e)||e}for(var s=5;s--&&E.test(e);)e=e.replace(E,n);return re[e]||(re[e]=y(e)),re[e](t)}function g(t){switch(t){case"DDDD":return N;case"YYYY":return I;case"YYYYY":return X;case"S":case"SS":case"SSS":case"DDD":return V;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":case"a":case"A":return $;case"X":return q;case"Z":case"ZZ":return R;case"T":return j;case"MM":case"DD":case"YY":case"HH":case"hh":case"mm":case"ss":case"M":case"D":case"d":case"H":case"h":case"m":case"s":return J;default:return RegExp(t.replace("\\",""))}}function D(t,e,n){var s,r=n._a;switch(t){case"M":case"MM":r[1]=null==e?0:~~e-1;break;case"MMM":case"MMMM":s=_(n._l).monthsParse(e),null!=s?r[1]=s:n._isValid=!1;break;case"D":case"DD":case"DDD":case"DDDD":null!=e&&(r[2]=~~e);break;case"YY":r[0]=~~e+(~~e>68?1900:2e3);break;case"YYYY":case"YYYYY":r[0]=~~e;break;case"a":case"A":n._isPm="pm"===(e+"").toLowerCase();break;case"H":case"HH":case"h":case"hh":r[3]=~~e;break;case"m":case"mm":r[4]=~~e;break;case"s":case"ss":r[5]=~~e;break;case"S":case"SS":case"SSS":r[6]=~~(1e3*("0."+e));break;case"X":n._d=new Date(1e3*parseFloat(e));break;case"Z":case"ZZ":n._useUTC=!0,s=(e+"").match(te),s&&s[1]&&(n._tzh=~~s[1]),s&&s[2]&&(n._tzm=~~s[2]),s&&"+"===s[0]&&(n._tzh=-n._tzh,n._tzm=-n._tzm)}null==e&&(n._isValid=!1)}function Y(t){var e,n,s=[];if(!t._d){for(e=0;7>e;e++)t._a[e]=s[e]=null==t._a[e]?2===e?1:0:t._a[e];s[3]+=t._tzh||0,s[4]+=t._tzm||0,n=new Date(0),t._useUTC?(n.setUTCFullYear(s[0],s[1],s[2]),n.setUTCHours(s[3],s[4],s[5],s[6])):(n.setFullYear(s[0],s[1],s[2]),n.setHours(s[3],s[4],s[5],s[6])),t._d=n}}function w(t){var e,n,s=t._f.match(Z),r=t._i;for(t._a=[],e=0;s.length>e;e++)n=(g(s[e]).exec(r)||[])[0],n&&(r=r.slice(r.indexOf(n)+n.length)),oe[s[e]]&&D(s[e],n,t);t._isPm&&12>t._a[3]&&(t._a[3]+=12),t._isPm===!1&&12===t._a[3]&&(t._a[3]=0),Y(t)}function p(t){var e,n,s,i,o,u=99;for(i=t._f.length;i>0;i--){if(e=a({},t),e._f=t._f[i-1],w(e),n=new r(e),n.isValid()){s=n;break}o=c(e._a,n.toArray()),u>o&&(u=o,s=n)}a(t,s)}function k(t){var e,n=t._i;if(B.exec(n)){for(t._f="YYYY-MM-DDT",e=0;4>e;e++)if(Q[e][1].exec(n)){t._f+=Q[e][0];break}R.exec(n)&&(t._f+=" Z"),w(t)}else t._d=new Date(n)}function v(e){var n=e._i,s=A.exec(n);n===t?e._d=new Date:s?e._d=new Date(+s[1]):"string"==typeof n?k(e):h(n)?(e._a=n.slice(0),Y(e)):e._d=n instanceof Date?new Date(+n):new Date(n)}function T(t,e,n,s,r){return r.relativeTime(e||1,!!n,t,s)}function S(t,e,n){var s=P(Math.abs(t)/1e3),r=P(s/60),i=P(r/60),a=P(i/24),o=P(a/365),u=45>s&&["s",s]||1===r&&["m"]||45>r&&["mm",r]||1===i&&["h"]||22>i&&["hh",i]||1===a&&["d"]||25>=a&&["dd",a]||45>=a&&["M"]||345>a&&["MM",P(a/30)]||1===o&&["y"]||["yy",o];return u[2]=e,u[3]=t>0,u[4]=n,T.apply({},u)}function b(t,e,n){var s,r=n-e,i=n-t.day();return i>r&&(i-=7),r-7>i&&(i+=7),s=C(t).add("d",i),{week:Math.ceil(s.dayOfYear()/7),year:s.year()}}function F(t){var e=t._i,n=t._f;return null===e||""===e?null:("string"==typeof e&&(t._i=e=_().preparse(e)),C.isMoment(e)?(t=a({},e),t._d=new Date(+e._d)):n?h(n)?p(t):w(t):v(t),new r(t))}function L(t,e){C.fn[t]=C.fn[t+"s"]=function(t){var n=this._isUTC?"UTC":"";return null!=t?(this._d["set"+n+e](t),this):this._d["get"+n+e]()}}function H(t){C.duration.fn[t]=function(){return this._data[t]}}function O(t,e){C.duration.fn["as"+t]=function(){return+this/e}}for(var C,z,W="2.0.0",P=Math.round,U={},x="undefined"!=typeof module&&module.exports,A=/^\/?Date\((\-?\d+)/i,G=/(\-)?(\d*)?\.?(\d+)\:(\d+)\:(\d+)\.?(\d{3})?/,Z=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,E=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,J=/\d\d?/,V=/\d{1,3}/,N=/\d{3}/,I=/\d{1,4}/,X=/[+\-]?\d{1,6}/,$=/[0-9]*[a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,R=/Z|[\+\-]\d\d:?\d\d/i,j=/T/i,q=/[\+\-]?\d+(\.\d{1,3})?/,B=/^\s*\d{4}-\d\d-\d\d((T| )(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/,K="YYYY-MM-DDTHH:mm:ssZ",Q=[["HH:mm:ss.S",/(T| )\d\d:\d\d:\d\d\.\d{1,3}/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],te=/([\+\-]|\d\d)/gi,ee="Date|Hours|Minutes|Seconds|Milliseconds".split("|"),ne={Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6},se={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",w:"week",M:"month",y:"year"},re={},ie="DDD w W M D d".split(" "),ae="M D H h m s w W".split(" "),oe={M:function(){return this.month()+1},MMM:function(t){return this.lang().monthsShort(this,t)},MMMM:function(t){return this.lang().months(this,t)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(t){return this.lang().weekdaysMin(this,t)},ddd:function(t){return this.lang().weekdaysShort(this,t)},dddd:function(t){return this.lang().weekdays(this,t)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return u(this.year()%100,2)},YYYY:function(){return u(this.year(),4)},YYYYY:function(){return u(this.year(),5)},gg:function(){return u(this.weekYear()%100,2)},gggg:function(){return this.weekYear()},ggggg:function(){return u(this.weekYear(),5)},GG:function(){return u(this.isoWeekYear()%100,2)},GGGG:function(){return this.isoWeekYear()},GGGGG:function(){return u(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.lang().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.lang().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return~~(this.milliseconds()/100)},SS:function(){return u(~~(this.milliseconds()/10),2)},SSS:function(){return u(this.milliseconds(),3)},Z:function(){var t=-this.zone(),e="+";return 0>t&&(t=-t,e="-"),e+u(~~(t/60),2)+":"+u(~~t%60,2)},ZZ:function(){var t=-this.zone(),e="+";return 0>t&&(t=-t,e="-"),e+u(~~(10*t/6),4)},X:function(){return this.unix()}};ie.length;)z=ie.pop(),oe[z+"o"]=n(oe[z],z);for(;ae.length;)z=ae.pop(),oe[z+z]=e(oe[z],2);for(oe.DDDD=e(oe.DDD,3),s.prototype={set:function(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(t){return this._months[t.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(t){return this._monthsShort[t.month()]},monthsParse:function(t){var e,n,s;for(this._monthsParse||(this._monthsParse=[]),e=0;12>e;e++)if(this._monthsParse[e]||(n=C([2e3,e]),s="^"+this.months(n,"")+"|^"+this.monthsShort(n,""),this._monthsParse[e]=RegExp(s.replace(".",""),"i")),this._monthsParse[e].test(t))return e},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(t){return this._weekdays[t.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(t){return this._weekdaysShort[t.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(t){return this._weekdaysMin[t.day()]},weekdaysParse:function(t){var e,n,s;for(this._weekdaysParse||(this._weekdaysParse=[]),e=0;7>e;e++)if(this._weekdaysParse[e]||(n=C([2e3,1]).day(e),s="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=RegExp(s.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D YYYY",LLL:"MMMM D YYYY LT",LLLL:"dddd, MMMM D YYYY LT"},longDateFormat:function(t){var e=this._longDateFormat[t];return!e&&this._longDateFormat[t.toUpperCase()]&&(e=this._longDateFormat[t.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t]=e),e},meridiem:function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(t,e){var n=this._calendar[t];return"function"==typeof n?n.apply(e):n},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(t,e,n,s){var r=this._relativeTime[n];return"function"==typeof r?r(t,e,n,s):r.replace(/%d/i,t)},pastFuture:function(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)},ordinal:function(t){return this._ordinal.replace("%d",t)},_ordinal:"%d",preparse:function(t){return t},postformat:function(t){return t},week:function(t){return b(t,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6}},C=function(t,e,n){return F({_i:t,_f:e,_l:n,_isUTC:!1})},C.utc=function(t,e,n){return F({_useUTC:!0,_isUTC:!0,_l:n,_i:t,_f:e})},C.unix=function(t){return C(1e3*t)},C.duration=function(t,e){var n,s,r=C.isDuration(t),a="number"==typeof t,o=r?t._data:a?{}:t,u=G.exec(t);return a?e?o[e]=t:o.milliseconds=t:u&&(n="-"===u[1]?-1:1,o={y:0,d:~~u[2]*n,h:~~u[3]*n,m:~~u[4]*n,s:~~u[5]*n,ms:~~u[6]*n}),s=new i(o),r&&t.hasOwnProperty("_lang")&&(s._lang=t._lang),s},C.version=W,C.defaultFormat=K,C.lang=function(e,n){return e?(n?l(e,n):U[e]||_(e),C.duration.fn._lang=C.fn._lang=_(e),t):C.fn._lang._abbr},C.langData=function(t){return t&&t._lang&&t._lang._abbr&&(t=t._lang._abbr),_(t)},C.isMoment=function(t){return t instanceof r},C.isDuration=function(t){return t instanceof i},C.fn=r.prototype={clone:function(){return C(this)},valueOf:function(){return+this._d},unix:function(){return Math.floor(+this._d/1e3)},toString:function(){return this.format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._d},toJSON:function(){return M(C(this).utc(),"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var t=this;return[t.year(),t.month(),t.date(),t.hours(),t.minutes(),t.seconds(),t.milliseconds()]},isValid:function(){return null==this._isValid&&(this._isValid=this._a?!c(this._a,(this._isUTC?C.utc(this._a):C(this._a)).toArray()):!isNaN(this._d.getTime())),!!this._isValid},utc:function(){return this._isUTC=!0,this},local:function(){return this._isUTC=!1,this},format:function(t){var e=M(this,t||C.defaultFormat);return this.lang().postformat(e)},add:function(t,e){var n;return n="string"==typeof t?C.duration(+e,t):C.duration(t,e),d(this,n,1),this},subtract:function(t,e){var n;return n="string"==typeof t?C.duration(+e,t):C.duration(t,e),d(this,n,-1),this},diff:function(t,e,n){var s,r,i=this._isUTC?C(t).utc():C(t).local(),a=6e4*(this.zone()-i.zone());return e=f(e),"year"===e||"month"===e?(s=432e5*(this.daysInMonth()+i.daysInMonth()),r=12*(this.year()-i.year())+(this.month()-i.month()),r+=(this-C(this).startOf("month")-(i-C(i).startOf("month")))/s,"year"===e&&(r/=12)):(s=this-i-a,r="second"===e?s/1e3:"minute"===e?s/6e4:"hour"===e?s/36e5:"day"===e?s/864e5:"week"===e?s/6048e5:s),n?r:o(r)},from:function(t,e){return C.duration(this.diff(t)).lang(this.lang()._abbr).humanize(!e)},fromNow:function(t){return this.from(C(),t)},calendar:function(){var t=this.diff(C().startOf("day"),"days",!0),e=-6>t?"sameElse":-1>t?"lastWeek":0>t?"lastDay":1>t?"sameDay":2>t?"nextDay":7>t?"nextWeek":"sameElse";return this.format(this.lang().calendar(e,this))},isLeapYear:function(){var t=this.year();return 0===t%4&&0!==t%100||0===t%400},isDST:function(){return this.zone()<C([this.year()]).zone()||this.zone()<C([this.year(),5]).zone()},day:function(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?"string"==typeof t&&(t=this.lang().weekdaysParse(t),"number"!=typeof t)?this:this.add({d:t-e}):e},month:function(t){var e=this._isUTC?"UTC":"";return null!=t?"string"==typeof t&&(t=this.lang().monthsParse(t),"number"!=typeof t)?this:(this._d["set"+e+"Month"](t),this):this._d["get"+e+"Month"]()},startOf:function(t){switch(t=f(t)){case"year":this.month(0);case"month":this.date(1);case"week":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.day(0),this},endOf:function(t){return this.startOf(t).add(t,1).subtract("ms",1)},isAfter:function(e,n){return n=n!==t?n:"millisecond",+this.clone().startOf(n)>+C(e).startOf(n)},isBefore:function(e,n){return n=n!==t?n:"millisecond",+this.clone().startOf(n)<+C(e).startOf(n)},isSame:function(e,n){return n=n!==t?n:"millisecond",+this.clone().startOf(n)===+C(e).startOf(n)},zone:function(){return this._isUTC?0:this._d.getTimezoneOffset()},daysInMonth:function(){return C.utc([this.year(),this.month()+1,0]).date()},dayOfYear:function(t){var e=P((C(this).startOf("day")-C(this).startOf("year"))/864e5)+1;return null==t?e:this.add("d",t-e)},weekYear:function(t){var e=b(this,this.lang()._week.dow,this.lang()._week.doy).year;return null==t?e:this.add("y",t-e)},isoWeekYear:function(t){var e=b(this,1,4).year;return null==t?e:this.add("y",t-e)},week:function(t){var e=this.lang().week(this);return null==t?e:this.add("d",7*(t-e))},isoWeek:function(t){var e=b(this,1,4).week;return null==t?e:this.add("d",7*(t-e))},weekday:function(t){var e=(this._d.getDay()+7-this.lang()._week.dow)%7;return null==t?e:this.add("d",t-e)},isoWeekday:function(t){var e=(this._d.getDay()+6)%7;return null==t?e:this.add("d",t-e)},lang:function(e){return e===t?this._lang:(this._lang=_(e),this)}},z=0;ee.length>z;z++)L(ee[z].toLowerCase().replace(/s$/,""),ee[z]);L("year","FullYear"),C.fn.days=C.fn.day,C.fn.months=C.fn.month,C.fn.weeks=C.fn.week,C.fn.isoWeeks=C.fn.isoWeek,C.duration.fn=i.prototype={weeks:function(){return o(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+2592e6*(this._months%12)+31536e6*~~(this._months/12)},humanize:function(t){var e=+this,n=S(e,!t,this.lang());return t&&(n=this.lang().pastFuture(e,n)),this.lang().postformat(n)},get:function(t){return t=f(t),this[t.toLowerCase()+"s"]()},as:function(t){return t=f(t),this["as"+t.charAt(0).toUpperCase()+t.slice(1)+"s"]()},lang:C.fn.lang};for(z in ne)ne.hasOwnProperty(z)&&(O(z,ne[z]),H(z.toLowerCase()));O("Weeks",6048e5),C.duration.fn.asMonths=function(){return(+this-31536e6*this.years())/2592e6+12*this.years()},C.lang("en",{ordinal:function(t){var e=t%10,n=1===~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),x&&(module.exports=C),"undefined"==typeof ender&&(this.moment=C),"function"==typeof define&&define.amd&&define("moment",[],function(){return C})}).call(this);


/*! lib/moment/lang/zh-cn.js */
// moment.js language configuration
// language : chinese
// author : suupic : https://github.com/suupic
(function(){function e(e){e.lang("zh-cn",{months:"\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708".split("_"),monthsShort:"1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),weekdays:"\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d".split("_"),weekdaysShort:"\u5468\u65e5_\u5468\u4e00_\u5468\u4e8c_\u5468\u4e09_\u5468\u56db_\u5468\u4e94_\u5468\u516d".split("_"),weekdaysMin:"\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d".split("_"),longDateFormat:{LT:"Ah\u70b9mm",L:"YYYY\u5e74MMMD\u65e5",LL:"YYYY\u5e74MMMD\u65e5",LLL:"YYYY\u5e74MMMD\u65e5LT",LLLL:"YYYY\u5e74MMMD\u65e5ddddLT",l:"YYYY\u5e74MMMD\u65e5",ll:"YYYY\u5e74MMMD\u65e5",lll:"YYYY\u5e74MMMD\u65e5LT",llll:"YYYY\u5e74MMMD\u65e5ddddLT"},meridiem:function(e,a){return 9>e?"\u65e9\u4e0a":11>e&&30>a?"\u4e0a\u5348":13>e&&30>a?"\u4e2d\u5348":18>e?"\u4e0b\u5348":"\u665a\u4e0a"},calendar:{sameDay:"[\u4eca\u5929]LT",nextDay:"[\u660e\u5929]LT",nextWeek:"[\u4e0b]ddddLT",lastDay:"[\u6628\u5929]LT",lastWeek:"[\u4e0a]ddddLT",sameElse:"L"},ordinal:function(e,a){switch(a){case"d":case"D":case"DDD":return e+"\u65e5";case"M":return e+"\u6708";case"w":case"W":return e+"\u5468";default:return e}},relativeTime:{future:"%s\u5185",past:"%s\u524d",s:"\u51e0\u79d2",m:"1\u5206\u949f",mm:"%d\u5206\u949f",h:"1\u5c0f\u65f6",hh:"%d\u5c0f\u65f6",d:"1\u5929",dd:"%d\u5929",M:"1\u4e2a\u6708",MM:"%d\u4e2a\u6708",y:"1\u5e74",yy:"%d\u5e74"}})}"function"==typeof define&&define.amd&&define(["moment"],e),"undefined"!=typeof window&&window.moment&&e(window.moment)})();


/*! lib/textillate/assets/jquery.fittext.js */
/*global jQuery */
/*!	
* FitText.js 1.1
*
* Copyright 2011, Dave Rupert http://daverupert.com
* Released under the WTFPL license 
* http://sam.zoy.org/wtfpl/
*
* Date: Thu May 05 14:23:00 2011 -0600
*/

(function( $ ){
	
  $.fn.fitText = function( kompressor, options ) {
	   
    // Setup options
    var compressor = kompressor || 1,
        settings = $.extend({
          'minFontSize' : Number.NEGATIVE_INFINITY,
          'maxFontSize' : Number.POSITIVE_INFINITY
        }, options);
	
    return this.each(function(){

      // Store the object
      var $this = $(this); 
        
      // Resizer() resizes items based on the object width divided by the compressor * 10
      var resizer = function () {
        $this.css('font-size', Math.max(Math.min($this.width() / (compressor*10), parseFloat(settings.maxFontSize)), parseFloat(settings.minFontSize)));
      };

      // Call once to set.
      resizer();
				
      // Call on resize. Opera debounces their resize by default. 
      $(window).on('resize', resizer);
      	
    });

  };

})( jQuery );


/*! lib/textillate/assets/jquery.lettering.js */
/*global jQuery */
/*!	
* Lettering.JS 0.6.1
*
* Copyright 2010, Dave Rupert http://daverupert.com
* Released under the WTFPL license 
* http://sam.zoy.org/wtfpl/
*
* Thanks to Paul Irish - http://paulirish.com - for the feedback.
*
* Date: Mon Sep 20 17:14:00 2010 -0600
*/
(function($){
	function injector(t, splitter, klass, after) {
		var a = t.text().split(splitter), inject = '';
		if (a.length) {
			$(a).each(function(i, item) {
				inject += '<span class="'+klass+(i+1)+'">'+item+'</span>'+after;
			});	
			t.empty().append(inject);
		}
	}
	
	var methods = {
		init : function() {

			return this.each(function() {
				injector($(this), '', 'char', '');
			});

		},

		words : function() {

			return this.each(function() {
				injector($(this), ' ', 'word', ' ');
			});

		},
		
		lines : function() {

			return this.each(function() {
				var r = "eefec303079ad17405c889e092e105b0";
				// Because it's hard to split a <br/> tag consistently across browsers,
				// (*ahem* IE *ahem*), we replaces all <br/> instances with an md5 hash 
				// (of the word "split").  If you're trying to use this plugin on that 
				// md5 hash string, it will fail because you're being ridiculous.
				injector($(this).children("br").replaceWith(r).end(), r, 'line', '');
			});

		}
	};

	$.fn.lettering = function( method ) {
		// Method calling logic
		if ( method && methods[method] ) {
			return methods[ method ].apply( this, [].slice.call( arguments, 1 ));
		} else if ( method === 'letters' || ! method ) {
			return methods.init.apply( this, [].slice.call( arguments, 0 ) ); // always pass an array
		}
		$.error( 'Method ' +  method + ' does not exist on jQuery.lettering' );
		return this;
	};

})(jQuery);


/*! lib/textillate/jquery.textillate.js */
/*!
 * texillate.js
 * http://jschr.github.com/textillate
 * MIT licensed
 *
 * Copyright (C) 2012-2013 Jordan Schroter
 */

(function ($) {
  "use strict"; 

  function isInEffect (effect) {
    return /In/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.inEffects) >= 0;
  };

  function isOutEffect (effect) {
    return /Out/.test(effect) || $.inArray(effect, $.fn.textillate.defaults.outEffects) >= 0;
  };

  // custom get data api method
  function getData (node) {
    var attrs = node.attributes || []
      , data = {};

    if (!attrs.length) return data;

    $.each(attrs, function (i, attr) {
      if (/^data-in-*/.test(attr.nodeName)) {
        data.in = data.in || {};
        data.in[attr.nodeName.replace(/data-in-/, '')] = attr.nodeValue;
      } else if (/^data-out-*/.test(attr.nodeName)) {
        data.out = data.out || {};
        data.out[attr.nodeName.replace(/data-out-/, '')] = attr.nodeValue;
      } else if (/^data-*/.test(attr.nodeName)) {
        data[attr.nodeName] = attr.nodeValue;
      }
    })

    return data;
  }

  function shuffle (o) {
      for (var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
      return o;
  }

  function animate ($c, effect, cb) {
    $c.addClass('animated ' + effect)
      .css('visibility', 'visible')
      .show();

    $c.one('animationend webkitAnimationEnd oAnimationEnd', function () {
        $c.removeClass('animated ' + effect);
        cb && cb();
    });
  }

  function animateChars ($chars, options, cb) {
    var that = this
      , count = $chars.length;

    if (!count) {
      cb && cb();
      return;
    } 

    if (options.shuffle) shuffle($chars);

    $chars.each(function (i) {
      var $this = $(this);
      
      function complete () {
        if (isInEffect(options.effect)) {
          $this.css('visibility', 'visible');
        } else if (isOutEffect(options.effect)) {
          $this.css('visibility', 'hidden');
        }
        count -= 1;
        if (!count && cb) cb();
      }

      var delay = options.sync ? options.delay : options.delay * i * options.delayScale;

      $this.text() ? 
        setTimeout(function () { animate($this, options.effect, complete) }, delay) :
        complete();
    })
  };

  var Textillate = function (element, options) {
    var base = this
      , $element = $(element);

    base.init = function () {
      base.$texts = $element.find(options.selector);
      
      if (!base.$texts.length) {
        base.$texts = $('<ul class="texts"><li>' + $element.html() + '</li></ul>');
        $element.html(base.$texts);
      }

      base.$texts.hide();

      base.$current = $('<span>')
        .text(base.$texts.find(':first-child').html())
        .prependTo($element);

      if (isInEffect(options.effect)) {
        base.$current.css('visibility', 'hidden');
      } else if (isOutEffect(options.effect)) {
        base.$current.css('visibility', 'visible');
      }

      base.setOptions(options);

      setTimeout(function () {
        base.options.autoStart && base.start();
      }, base.options.initialDelay)
    };

    base.setOptions = function (options) {
      base.options = options;
    };

    base.start = function (index) {
      var $next = base.$texts.find(':nth-child(' + (index || 1) + ')');

      (function run ($elem) {
        var options = $.extend({}, base.options, getData($elem));

        base.$current
          .text($elem.html())
          .lettering('words');

        base.$current.find('[class^="word"]')
            .css({ 
              'display': 'inline-block',
              // fix for poor ios performance
              '-webkit-transform': 'translate3d(0,0,0)',
                 '-moz-transform': 'translate3d(0,0,0)',
                   '-o-transform': 'translate3d(0,0,0)',
                      'transform': 'translate3d(0,0,0)'
            })
            .each(function () { $(this).lettering() });

        var $chars = base.$current.find('[class^="char"]')
          .css('display', 'inline-block');

        if (isInEffect(options.in.effect)) {
          $chars.css('visibility', 'hidden');
        } else if (isOutEffect(options.in.effect)) {
          $chars.css('visibility', 'visible');
        }

        animateChars($chars, options.in, function () {
          setTimeout(function () {
            // in case options have changed 
            var options = $.extend({}, base.options, getData($elem));

            var $next = $elem.next();

            if (base.options.loop && !$next.length) {
              $next = base.$texts.find(':first-child');
            } 

            if (!$next.length) return;

            animateChars($chars, options.out, function () {
              run($next)
            });
          }, base.options.minDisplayTime);
        });

      }($next));
    };

    base.init();
  }

  $.fn.textillate = function (settings, args) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('textillate')
        , options = $.extend(true, {}, $.fn.textillate.defaults, getData(this), typeof settings == 'object' && settings);

      if (!data) { 
        $this.data('textillate', (data = new Textillate(this, options)));
      } else if (typeof settings == 'string') {
        data[settings].apply(data, [].concat(args));
      } else {
        data.setOptions.call(data, options);
      }
    })
  };
  
  $.fn.textillate.defaults = {
    selector: '.texts',
    loop: false,
    minDisplayTime: 2000,
    initialDelay: 0,
    in: {
      effect: 'fadeInLeftBig',
      delayScale: 1.5,
      delay: 50,
      sync: false,
      shuffle: false
    },
    out: {
      effect: 'hinge',
      delayScale: 1.5,
      delay: 50,
      sync: false,
      shuffle: false,
    },
    autoStart: true,
    inEffects: [],
    outEffects: [ 'hinge' ]
  };

}(jQuery));
