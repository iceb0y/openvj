// Generated by CoffeeScript 1.6.3
(function() {
  var $_new, VJ, action_login, eventHandler_login_btnCancel_click, eventHandler_login_btnLogin_click, eventHandler_login_textbox_keypress, loginForm,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (typeof VJ === "undefined" || VJ === null) {
    VJ = window.VJ = {};
  }

  VJ.ajax = function(options) {
    var data;
    if ((options.url == null) && (options.action == null)) {
      return false;
    }
    options = VJ.Utils.fillParams(options, {
      url: '/ajax',
      method: 'post',
      expectFormat: 'json',
      onFailure: VJ.Noop,
      onSuccess: VJ.Noop,
      onError: VJ.Noop
    });
    data = {};
    if (options.action != null) {
      if (options.url === '/ajax') {
        options.url += '/' + options.action;
        if ((typeof user_info !== "undefined" && user_info !== null) && (user_info.sid != null)) {
          options.url += '?sid=' + user_info.sid;
        }
      } else {
        data.action = options.action;
      }
      if (options.data != null) {
        data = VJ.Utils.mergeObject(data, options.data);
      }
    } else {
      data = options.data;
    }
    return jQuery.ajax({
      type: options.method,
      url: options.url,
      data: data,
      dataType: 'text',
      success: function(data, status, xhr) {
        var objData;
        if (data == null) {
          options.onError('Invalid return value');
          VJ.Debug.error('VJ.ajax', 'action={action}, url={url} | Empty result'.format(options));
          return false;
        }
        if (options.expectFormat === 'json') {
          objData = JSON.parse(data.toString());
        } else {
          objData = data;
        }
        if (objData == null) {
          options.onError('Server internal error');
          VJ.Debug.error('VJ.ajax', 'action={action}, url={url}, data={data} | Server internal error'.format({
            action: options.action,
            url: options.url,
            data: data
          }));
          return false;
        }
        if (objData.succeeded === false) {
          options.onFailure(objData);
          return false;
        }
        return options.onSuccess(objData);
      },
      error: function(jqXHR, textStatus, errorThrown) {
        options.onError(textStatus);
        return VJ.Debug.error('VJ.ajax', 'action={action},url={url},error={error} | Network error.'.format({
          action: options.action,
          url: options.url,
          error: textStatus
        }));
      }
    });
  };

  $_new = window.$_new = function(te, ne) {
    var i, _i, _ref, _results;
    if (ne == null) {
      return;
    }
    if (typeof ne === 'string') {
      return te.appendChild(document.createTextNode(ne));
    } else if (ne.length != null) {
      te = te.appendChild($new(ne[0], ne[1]));
      _results = [];
      for (i = _i = 2, _ref = ne.length - 1; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
        _results.push($_new(te, ne[i]));
      }
      return _results;
    }
  };

  if (VJ == null) {
    VJ = window.VJ = {};
  }

  VJ.Debug = true;

  VJ.Noop = function() {};

  VJ.Domain = 'vijos.org';

  VJ.Host = location.host;

  VJ.Https = location.protocol === 'https:';

  VJ.Prefix = location.protocol + '//';

  if (VJ == null) {
    VJ = window.VJ = {};
  }

  VJ.Debug = {
    _execute: function(namespace, data) {
      var func;
      func = this;
      if (!VJ.Debug || (func == null)) {
        return;
      }
      return func.call(console, '[{time}] {ns} > '.format({
        time: new Date().format('Y-m-d H:i:s'),
        ns: namespace
      }), data.toString());
    },
    log: function(namespace, data) {
      if (typeof console !== "undefined" && console !== null) {
        return VJ.Debug._execute.apply(console.log, arguments);
      }
    },
    warn: function(namespace, data) {
      if (typeof console !== "undefined" && console !== null) {
        return VJ.Debug._execute.apply(console.warn, arguments);
      }
    },
    error: function(namespace, data) {
      if (typeof console !== "undefined" && console !== null) {
        return VJ.Debug._execute.apply(console.error, arguments);
      }
    }
  };

  if (VJ == null) {
    VJ = window.VJ = {};
  }

  VJ.Dialog = (function() {
    Dialog.dialogCount = 0;

    Dialog.dialogID = 0;

    Dialog.effects = 'fadeIn fadeInUp fadeInDown fadeInLeft fadeInRight bounceIn rollIn'.split(' ');

    Dialog.prototype.dialog = null;

    Dialog.prototype.dialogLayer = null;

    function Dialog(obj) {
      this.show = __bind(this.show, this);
      this.destroy = __bind(this.destroy, this);
      var b, btn, btnArea, btnRegion, contentRegion, titleRegion, _i, _len, _ref;
      this.dialogLayer = $new('div', {
        'class': 'vj-dlg-layer'
      });
      this.dialog = $new('div', {
        'class': 'vj-dlg'
      });
      $css.set(this.dialogLayer, 'z-index', (VJ.Dialog.dialogID * 2 + 10).toString());
      $css.set(this.dialog, 'z-index', (VJ.Dialog.dialogID * 2 + 11).toString());
      if (obj["class"] != null) {
        $className.add(this.dialog, 'dialog-' + obj["class"]);
      }
      if (obj.title != null) {
        titleRegion = $append(this.dialog, $new('h2', {
          'class': 'vj-dlg-title'
        }));
        $html($append(titleRegion, $new('div', {
          'class': 'vj-dlg-ctr'
        })), obj.title);
      }
      if (obj.content != null) {
        contentRegion = $append(this.dialog, $new('div', {
          'class': 'vj-dlg-cont'
        }));
        if (typeof obj.content === 'string') {
          $html($append(contentRegion, $new('div', {
            'class': 'vj-dlg-ctr'
          })), obj.content);
        } else if (obj.content instanceof HTMLElement) {
          $append($append(contentRegion, $new('div', {
            'class': 'vj-dlg-ctr'
          })), obj.content);
        } else {
          throw 'Unknown type: obj.content';
        }
      }
      if (obj.buttons != null) {
        btnRegion = $append(this.dialog, $new('div', {
          'class': 'vj-dlg-btn'
        }));
        btnArea = $append(btnRegion, $new('div', {
          'class': 'vj-dlg-ctr'
        }));
        _ref = obj.buttons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          b = _ref[_i];
          btn = $append(btnArea, $new('input', {
            'type': 'button',
            'class': 'button',
            'value': b.text
          }));
          if (b["class"] != null) {
            $className.add(btn, b["class"]);
          }
          if (b.onClick != null) {
            $event.on(btn, {
              'click': b.onClick
            });
          }
        }
      }
      ++VJ.Dialog.dialogCount;
      ++VJ.Dialog.dialogID;
    }

    Dialog.prototype.destroy = function() {
      var _this = this;
      $className.remove(this.dialog, 'show');
      $className.remove(this.dialogLayer, 'show');
      setTimeout(function() {
        $remove(_this.dialog);
        $remove(_this.dialogLayer);
        _this.dialog = null;
        return _this.dialogLayer = null;
      }, 500);
      return --VJ.Dialog.dialogCount;
    };

    Dialog.prototype.show = function(effect) {
      var h, wh,
        _this = this;
      if (effect == null) {
        effect = true;
      }
      $append(document.body, this.dialogLayer);
      $append(document.body, this.dialog);
      h = this.dialog.offsetHeight;
      wh = jQuery(window).height();
      $css.set(this.dialog, 'top', (wh - h) / 2);
      setTimeout(function() {
        return $className.add(_this.dialogLayer, 'show');
      }, 0);
      setTimeout(function() {
        $className.add(_this.dialog, 'show');
        if (effect === true) {
          return jQuery(_this.dialog).find('.vj-dlg-cont .vj-dlg-ctr').textillate({
            "in": {
              effect: VJ.Dialog.effects[Math.floor(Math.random() * VJ.Dialog.effects.length)],
              delayScale: 1,
              delay: Math.floor(500 / $text(_this.dialog).length),
              shuffle: true
            }
          });
        }
      }, 100);
      return this;
    };

    Dialog.alert = function(text, title) {
      var dialog,
        _this = this;
      dialog = new VJ.Dialog({
        title: title,
        content: text,
        buttons: [
          {
            text: 'OK',
            "class": 'button-def',
            onClick: function() {
              return dialog.destroy();
            }
          }
        ]
      });
      dialog.show();
      return mass.query('.button-def', dialog.dialog)[0].focus();
    };

    return Dialog;

  })();

  if (VJ == null) {
    VJ = window.VJ = {};
  }

  VJ.I18N = {
    resMap: {},
    lang: null,
    register: function(lang, map) {
      VJ.I18N.resMap[lang] = map;
      if (VJ.I18N.lang == null) {
        return VJ.I18N.lang = lang;
      }
    },
    get: function(key, rep) {
      var res;
      if (VJ.I18N.resMap[VJ.I18N.lang][key] != null) {
        res = VJ.I18N.resMap[VJ.I18N.lang][key];
      } else {
        res = key;
      }
      if (rep != null) {
        res = res.format(rep);
      }
      return res;
    }
  };

  window._ = function() {
    return VJ.I18N.get.apply(this, arguments);
  };

  if (VJ == null) {
    VJ = window.VJ = {};
  }

  loginForm = null;

  eventHandler_login_textbox_keypress = function(e) {
    if (e.which === 13) {
      action_login(loginForm.dialog);
      return false;
    }
  };

  eventHandler_login_btnLogin_click = function() {
    return action_login(loginForm.dialog);
  };

  eventHandler_login_btnCancel_click = function() {
    return loginForm.destroy();
  };

  action_login = function(dialog) {
    var data, data_encrypted, pass, rsa, user;
    if (typeof RSAKey === "undefined" || RSAKey === null) {
      VJ.Dialog.alert('登录时遇到问题：RSA库载入失败。请刷新后重试。', 'Error');
      return;
    }
    if (typeof RSA_PUBLIC === "undefined" || RSA_PUBLIC === null) {
      VJ.Dialog.alert('登录时遇到问题：RSA私钥载入失败。请刷新后重试。', 'Error');
      return;
    }
    user = mass.query('.role-form-login-username', loginForm.dialog)[0].value;
    pass = mass.query('.role-form-login-password', loginForm.dialog)[0].value;
    data = JSON.stringify({
      user: user,
      pass: pass,
      timestamp: Math.floor(new Date().getTime() / 1000) - RSA_PUBLIC.timestamp_offset
    });
    rsa = new RSAKey();
    rsa.setPublic(RSA_PUBLIC.key, RSA_PUBLIC.e);
    data_encrypted = rsa.encrypt(data);
    return VJ.ajax({
      action: 'login',
      data: {
        encrypted: data_encrypted
      },
      onSuccess: function(d) {
        return console.log(d);
      },
      onFailure: function(d) {
        return VJ.Dialog.alert(d.errorMsg, 'Login');
      }
    });
  };

  VJ.Utils = {
    showLogin: function() {
      var loginWrapper;
      if (typeof RSAKey === "undefined" || RSAKey === null) {
        $append(document.body, $new('script', {
          'src': '/static/lib/rsa/rsa-bundle.js'
        }));
      }
      if (typeof RSA_PUBLIC === "undefined" || RSA_PUBLIC === null) {
        VJ.ajax({
          action: 'rsa',
          onSuccess: function(d) {
            d.timestamp_offset = Math.floor(new Date().getTime() / 1000) - d.timestamp;
            return window.RSA_PUBLIC = d;
          }
        });
      }
      loginWrapper = $new('div');
      $_new(loginWrapper, [
        'div', {
          "class": 'form-login'
        }, [
          'form', {
            action: '/ajax/login',
            method: 'post'
          }, [
            'div', {
              "class": 'form-line'
            }, [
              'label', {
                "class": 'form-login-label label-user',
                innerHTML: _('form.login.l_user')
              }
            ], [
              'input', {
                type: 'text',
                "class": 'textbox role-form-login-username'
              }
            ]
          ], [
            'div', {
              "class": 'form-line'
            }, [
              'label', {
                "class": 'form-login-label label-pass',
                innerHTML: _('form.login.l_pass')
              }
            ], [
              'input', {
                type: 'password',
                "class": 'textbox role-form-login-password'
              }
            ]
          ]
        ]
      ]);
      if (loginForm != null) {
        loginForm.destroy();
      }
      $event.on(mass.query('.textbox', loginWrapper), 'keypress', eventHandler_login_textbox_keypress);
      loginForm = new VJ.Dialog({
        "class": 'login',
        title: _('form.login.title'),
        content: loginWrapper,
        buttons: [
          {
            text: _('form.login.b_login'),
            "class": 'button-def',
            onClick: eventHandler_login_btnLogin_click
          }, {
            text: _('form.login.b_cancel'),
            onClick: eventHandler_login_btnCancel_click
          }
        ]
      });
      loginForm.show(false);
      return mass.query('.role-form-login-username', loginWrapper)[0].focus();
    },
    fillParams: function(options, defaultValue) {
      var key, ret, value;
      if (options == null) {
        return defaultValue;
      }
      ret = jQuery.extend({}, options);
      for (key in defaultValue) {
        value = defaultValue[key];
        if (ret[key] == null) {
          ret[key] = value;
        }
      }
      return ret;
    },
    mergeObject: function(obj1, obj2) {
      var key, ret, value;
      if ((obj1 == null) && (obj2 == null)) {
        return void 0;
      }
      ret = obj1;
      for (key in obj2) {
        value = obj2[key];
        ret[key] = value;
      }
      return ret;
    }
  };

}).call(this);
