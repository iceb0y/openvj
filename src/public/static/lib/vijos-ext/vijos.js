// Generated by CoffeeScript 1.6.3
(function() {
  var $_new, VJ, eventHandler_login_btnCancel_click, eventHandler_login_btnLogin_click, loginForm,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $_new = window.$_new = function(te, ne) {
    var i, _i, _ref, _results;
    if (ne == null) {
      return;
    }
    if (typeof ne === 'string') {
      return te.appendChild(document.createTextNode(ne));
    } else if (ne.length != null) {
      te = te.appendChild($new(ne[0], ne[1]));
      _results = [];
      for (i = _i = 2, _ref = ne.length - 1; 2 <= _ref ? _i <= _ref : _i >= _ref; i = 2 <= _ref ? ++_i : --_i) {
        _results.push($_new(te, ne[i]));
      }
      return _results;
    }
  };

  VJ = window.VJ = {
    Debug: true,
    Noop: function() {},
    Domain: 'vijos.org',
    Host: location.host,
    Https: location.protocol === 'https:',
    Prefix: location.protocol + '//'
  };

  VJ.Dialog = (function() {
    Dialog.dialogCount = 0;

    Dialog.dialogID = 0;

    Dialog.effects = 'fadeIn fadeInUp fadeInDown fadeInLeft fadeInRight bounceIn rollIn'.split(' ');

    Dialog.prototype.dialog = null;

    Dialog.prototype.dialogLayer = null;

    function Dialog(obj) {
      this.show = __bind(this.show, this);
      this.destroy = __bind(this.destroy, this);
      var b, btn, btnArea, btnRegion, contentRegion, titleRegion, _i, _len, _ref;
      this.dialogLayer = $new('div', {
        'class': 'vj-dlg-layer'
      });
      this.dialog = $new('div', {
        'class': 'vj-dlg'
      });
      $css.set(this.dialogLayer, 'z-index', (VJ.Dialog.dialogID * 2 + 10).toString());
      $css.set(this.dialog, 'z-index', (VJ.Dialog.dialogID * 2 + 11).toString());
      if (obj["class"] != null) {
        $className.add(this.dialog, 'dialog-' + obj["class"]);
      }
      if (obj.title != null) {
        titleRegion = $append(this.dialog, $new('h2', {
          'class': 'vj-dlg-title'
        }));
        $html($append(titleRegion, $new('div', {
          'class': 'vj-dlg-ctr'
        })), obj.title);
      }
      if (obj.content != null) {
        contentRegion = $append(this.dialog, $new('div', {
          'class': 'vj-dlg-cont'
        }));
        if (typeof obj.content === 'string') {
          $html($append(contentRegion, $new('div', {
            'class': 'vj-dlg-ctr'
          })), obj.content);
        } else if (obj.content instanceof HTMLElement) {
          $append($append(contentRegion, $new('div', {
            'class': 'vj-dlg-ctr'
          })), obj.content);
        } else {
          throw 'Unknown type: obj.content';
        }
      }
      if (obj.buttons != null) {
        btnRegion = $append(this.dialog, $new('div', {
          'class': 'vj-dlg-btn'
        }));
        btnArea = $append(btnRegion, $new('div', {
          'class': 'vj-dlg-ctr'
        }));
        _ref = obj.buttons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          b = _ref[_i];
          btn = $append(btnArea, $new('input', {
            'type': 'button',
            'class': 'button',
            'value': b.text
          }));
          if (b["class"] != null) {
            $className.add(btn, b["class"]);
          }
          if (b.onClick != null) {
            $event.on(btn, {
              'click': b.onClick
            });
          }
        }
      }
      ++VJ.Dialog.dialogCount;
      ++VJ.Dialog.dialogID;
    }

    Dialog.prototype.destroy = function() {
      var _this = this;
      $className.remove(this.dialog, 'show');
      $className.remove(this.dialogLayer, 'show');
      setTimeout(function() {
        $remove(_this.dialog);
        $remove(_this.dialogLayer);
        _this.dialog = null;
        return _this.dialogLayer = null;
      }, 500);
      return --VJ.Dialog.dialogCount;
    };

    Dialog.prototype.show = function(effect) {
      var h, wh,
        _this = this;
      if (effect == null) {
        effect = true;
      }
      $append(document.body, this.dialogLayer);
      $append(document.body, this.dialog);
      h = this.dialog.offsetHeight;
      wh = jQuery(window).height();
      $css.set(this.dialog, 'top', (wh - h) / 2);
      setTimeout(function() {
        return $className.add(_this.dialogLayer, 'show');
      }, 0);
      setTimeout(function() {
        $className.add(_this.dialog, 'show');
        if (effect === true) {
          return jQuery(_this.dialog).find('.vj-dlg-cont .vj-dlg-ctr').textillate({
            "in": {
              effect: VJ.Dialog.effects[Math.floor(Math.random() * VJ.Dialog.effects.length)],
              delayScale: 1,
              delay: Math.floor(1000 / $text(_this.dialog).length),
              shuffle: true
            }
          });
        }
      }, 100);
      return this;
    };

    return Dialog;

  })();

  VJ.I18N = {
    resMap: {},
    lang: null,
    register: function(lang, map) {
      VJ.I18N.resMap[lang] = map;
      if (VJ.I18N.lang == null) {
        return VJ.I18N.lang = lang;
      }
    },
    get: function(key, rep) {
      var res;
      if (VJ.I18N.resMap[VJ.I18N.lang][key] != null) {
        res = VJ.I18N.resMap[VJ.I18N.lang][key];
      } else {
        res = key;
      }
      if (rep != null) {
        res = res.format(rep);
      }
      return res;
    }
  };

  window._ = function() {
    return VJ.I18N.get.apply(this, arguments);
  };

  loginForm = null;

  eventHandler_login_btnLogin_click = function() {
    return alert('Not implemented');
  };

  eventHandler_login_btnCancel_click = function() {
    return loginForm.destroy();
  };

  VJ.Utils = {
    showLogin: function() {
      var loginWrapper;
      loginWrapper = $new('div');
      $_new(loginWrapper, [
        'div', {
          "class": 'form-login'
        }, [
          'div', {
            "class": 'form-line'
          }, [
            'label', {
              "class": 'form-login-label label-user'
            }
          ], [
            'input', {
              type: 'text',
              "class": 'textbox form-login-username'
            }
          ]
        ], [
          'div', {
            "class": 'form-line'
          }, [
            'label', {
              "class": 'form-login-label label-pass'
            }
          ], [
            'input', {
              type: 'password',
              "class": 'textbox form-login-password'
            }
          ]
        ]
      ]);
      $html(mass.query('.label-user', loginWrapper), _('form.login.l_user'));
      $html(mass.query('.label-pass', loginWrapper), _('form.login.l_pass'));
      $event.on(loginWrapper, 'keypress', '.textbox', function() {
        return eventHandler_login_btnLogin_click();
      });
      if (loginForm != null) {
        loginForm.destroy();
      }
      loginForm = new VJ.Dialog({
        "class": 'login',
        title: _('form.login.title'),
        content: loginWrapper,
        buttons: [
          {
            text: _('form.login.b_login'),
            "class": 'button-def',
            onClick: eventHandler_login_btnLogin_click
          }, {
            text: _('form.login.b_cancel'),
            onClick: eventHandler_login_btnCancel_click
          }
        ]
      });
      loginForm.show(false);
      return mass.query('.form-login-username')[0].focus();
    }
  };

}).call(this);
